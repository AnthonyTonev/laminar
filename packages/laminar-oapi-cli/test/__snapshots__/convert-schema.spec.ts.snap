// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`draft4 additionalItems.json Test additionalItems are allowed by default 1`] = `
Object {
  "schema": Object {
    "items": Array [
      Object {
        "type": "integer",
      },
    ],
  },
  "ts": "(number)[]",
}
`;

exports[`draft4 additionalItems.json Test additionalItems as false without items 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
  },
  "ts": "any",
}
`;

exports[`draft4 additionalItems.json Test additionalItems as schema 1`] = `
Object {
  "schema": Object {
    "additionalItems": Object {
      "type": "integer",
    },
    "items": Array [
      Object {},
    ],
  },
  "ts": "(any | number)[]",
}
`;

exports[`draft4 additionalItems.json Test array of items with no additionalItems 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
    "items": Array [
      Object {},
      Object {},
      Object {},
    ],
  },
  "ts": "[any, any, any]",
}
`;

exports[`draft4 additionalItems.json Test items is schema, no additionalItems 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
    "items": Object {},
  },
  "ts": "any[]",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties allows a schema which should validate 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "boolean",
    },
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: boolean;
}",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties are allowed by default 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: any;
}",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties being false does not allow other properties 1`] = `
Object {
  "schema": Object {
    "additionalProperties": false,
    "patternProperties": Object {
      "^v": Object {},
    },
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
}",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties can exist by itself 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "boolean",
    },
  },
  "ts": "any",
}
`;

exports[`draft4 additionalProperties.json Test additionalProperties should not look in applicators 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "boolean",
    },
    "allOf": Array [
      Object {
        "properties": Object {
          "foo": Object {},
        },
      },
    ],
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft4 additionalProperties.json Test non-ASCII pattern with additionalProperties 1`] = `
Object {
  "schema": Object {
    "additionalProperties": false,
    "patternProperties": Object {
      "^รก": Object {},
    },
  },
  "ts": "any",
}
`;

exports[`draft4 allOf.json Test allOf 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
        },
        "required": Array [
          "bar",
        ],
      },
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
} & {
    foo: string;
    [key: string]: any;
}",
}
`;

exports[`draft4 allOf.json Test allOf simple types 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "maximum": 30,
      },
      Object {
        "minimum": 20,
      },
    ],
  },
  "ts": "number & number",
}
`;

exports[`draft4 allOf.json Test allOf with base schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
      Object {
        "properties": Object {
          "baz": Object {
            "type": "null",
          },
        },
        "required": Array [
          "baz",
        ],
      },
    ],
    "properties": Object {
      "bar": Object {
        "type": "integer",
      },
    },
    "required": Array [
      "bar",
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
}",
}
`;

exports[`draft4 allOf.json Test allOf with one empty schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {},
    ],
  },
  "ts": "any",
}
`;

exports[`draft4 allOf.json Test allOf with the first empty schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {},
      Object {
        "type": "number",
      },
    ],
  },
  "ts": "any & number",
}
`;

exports[`draft4 allOf.json Test allOf with the last empty schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "type": "number",
      },
      Object {},
    ],
  },
  "ts": "number & any",
}
`;

exports[`draft4 allOf.json Test allOf with two empty schemas 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {},
      Object {},
    ],
  },
  "ts": "any & any",
}
`;

exports[`draft4 anyOf.json Test anyOf 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "type": "integer",
      },
      Object {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number",
}
`;

exports[`draft4 anyOf.json Test anyOf complex types 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
        },
        "required": Array [
          "bar",
        ],
      },
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
} | {
    foo: string;
    [key: string]: any;
}",
}
`;

exports[`draft4 anyOf.json Test anyOf with base schema 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "maxLength": 2,
      },
      Object {
        "minLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string",
}
`;

exports[`draft4 anyOf.json Test anyOf with one empty schema 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "type": "number",
      },
      Object {},
    ],
  },
  "ts": "number | any",
}
`;

exports[`draft4 default.json Test invalid string value for default 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "default": "bad",
        "minLength": 4,
        "type": "string",
      },
    },
  },
  "ts": "{
    bar?: string;
    [key: string]: any;
}",
}
`;

exports[`draft4 default.json Test invalid type for default 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {
        "default": Array [],
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    [key: string]: any;
}",
}
`;

exports[`draft4 definitions.json Test invalid definition 1`] = `
Object {
  "schema": Object {
    "$ref": "http://json-schema.org/draft-04/schema#",
  },
  "ts": "schema#

export interface schema# {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: boolean;
    minimum?: number;
    exclusiveMinimum?: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems?: boolean | #;
    items?: # | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems?: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties?: boolean | #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type positiveInteger = number;

export type positiveIntegerDefault0 = positiveInteger & any;

export interface # {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: boolean;
    minimum?: number;
    exclusiveMinimum?: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems?: boolean | #;
    items?: # | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems?: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties?: boolean | #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type schemaArray = #[];

export type stringArray = string[];

export type simpleTypes = \\"array\\" | \\"boolean\\" | \\"integer\\" | \\"null\\" | \\"number\\" | \\"object\\" | \\"string\\";",
}
`;

exports[`draft4 definitions.json Test valid definition 1`] = `
Object {
  "schema": Object {
    "$ref": "http://json-schema.org/draft-04/schema#",
  },
  "ts": "schema#

export interface schema# {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: boolean;
    minimum?: number;
    exclusiveMinimum?: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems?: boolean | #;
    items?: # | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems?: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties?: boolean | #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type positiveInteger = number;

export type positiveIntegerDefault0 = positiveInteger & any;

export interface # {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: boolean;
    minimum?: number;
    exclusiveMinimum?: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems?: boolean | #;
    items?: # | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems?: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties?: boolean | #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type schemaArray = #[];

export type stringArray = string[];

export type simpleTypes = \\"array\\" | \\"boolean\\" | \\"integer\\" | \\"null\\" | \\"number\\" | \\"object\\" | \\"string\\";",
}
`;

exports[`draft4 dependencies.json Test dependencies 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": Array [
        "foo",
      ],
    },
  },
  "ts": "any",
}
`;

exports[`draft4 dependencies.json Test dependencies with escaped characters 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "foo	bar": Object {
        "minProperties": 4,
      },
      "foo
bar": Array [
        "foo
bar",
      ],
      "foo\\"bar": Array [
        "foo'bar",
      ],
      "foo'bar": Object {
        "required": Array [
          "foo\\"bar",
        ],
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft4 dependencies.json Test multiple dependencies 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "quux": Array [
        "foo",
        "bar",
      ],
    },
  },
  "ts": "any",
}
`;

exports[`draft4 dependencies.json Test multiple dependencies subschema 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
          "foo": Object {
            "type": "integer",
          },
        },
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft4 enum.json Test enum with escaped characters 1`] = `
Object {
  "schema": Object {
    "enum": Array [
      "foo
bar",
      "foo
bar",
    ],
  },
  "ts": "\\"foo\\\\nbar\\" | \\"foo\\\\rbar\\"",
}
`;

exports[`draft4 enum.json Test enums in properties 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "enum": Array [
          "bar",
        ],
      },
      "foo": Object {
        "enum": Array [
          "foo",
        ],
      },
    },
    "required": Array [
      "bar",
    ],
    "type": "object",
  },
  "ts": "{
    foo?: \\"foo\\";
    bar: \\"bar\\";
    [key: string]: any;
}",
}
`;

exports[`draft4 enum.json Test heterogeneous enum validation 1`] = `
Object {
  "schema": Object {
    "enum": Array [
      6,
      "foo",
      Array [],
      true,
      Object {
        "foo": 12,
      },
    ],
  },
  "ts": "6 | \\"foo\\" | any | true | any",
}
`;

exports[`draft4 enum.json Test simple enum validation 1`] = `
Object {
  "schema": Object {
    "enum": Array [
      1,
      2,
      3,
    ],
  },
  "ts": "1 | 2 | 3",
}
`;

exports[`draft4 items.json Test a schema given for items 1`] = `
Object {
  "schema": Object {
    "items": Object {
      "type": "integer",
    },
  },
  "ts": "number[]",
}
`;

exports[`draft4 items.json Test an array of schemas for items 1`] = `
Object {
  "schema": Object {
    "items": Array [
      Object {
        "type": "integer",
      },
      Object {
        "type": "string",
      },
    ],
  },
  "ts": "(number | string)[]",
}
`;

exports[`draft4 items.json Test items and subitems 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
    "definitions": Object {
      "item": Object {
        "additionalItems": false,
        "items": Array [
          Object {
            "$ref": "#/definitions/sub-item",
          },
          Object {
            "$ref": "#/definitions/sub-item",
          },
        ],
        "type": "array",
      },
      "sub-item": Object {
        "required": Array [
          "foo",
        ],
        "type": "object",
      },
    },
    "items": Array [
      Object {
        "$ref": "#/definitions/item",
      },
      Object {
        "$ref": "#/definitions/item",
      },
      Object {
        "$ref": "#/definitions/item",
      },
    ],
    "type": "array",
  },
  "ts": "[item, item, item]

export type item = [sub-item, sub-item];

export type sub-item = any;",
}
`;

exports[`draft4 items.json Test nested items 1`] = `
Object {
  "schema": Object {
    "items": Object {
      "items": Object {
        "items": Object {
          "items": Object {
            "type": "number",
          },
          "type": "array",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "array",
  },
  "ts": "number[][][][]",
}
`;

exports[`draft4 maxItems.json Test maxItems validation 1`] = `
Object {
  "schema": Object {
    "maxItems": 2,
  },
  "ts": "any[]",
}
`;

exports[`draft4 maxLength.json Test maxLength validation 1`] = `
Object {
  "schema": Object {
    "maxLength": 2,
  },
  "ts": "string",
}
`;

exports[`draft4 maxProperties.json Test maxProperties validation 1`] = `
Object {
  "schema": Object {
    "maxProperties": 2,
  },
  "ts": "any",
}
`;

exports[`draft4 maximum.json Test exclusiveMaximum validation 1`] = `
Object {
  "schema": Object {
    "exclusiveMaximum": true,
    "maximum": 3,
  },
  "ts": "number",
}
`;

exports[`draft4 maximum.json Test maximum validation (explicit false exclusivity) 1`] = `
Object {
  "schema": Object {
    "exclusiveMaximum": false,
    "maximum": 3,
  },
  "ts": "number",
}
`;

exports[`draft4 maximum.json Test maximum validation 1`] = `
Object {
  "schema": Object {
    "maximum": 3,
  },
  "ts": "number",
}
`;

exports[`draft4 minItems.json Test minItems validation 1`] = `
Object {
  "schema": Object {
    "minItems": 1,
  },
  "ts": "any[]",
}
`;

exports[`draft4 minLength.json Test minLength validation 1`] = `
Object {
  "schema": Object {
    "minLength": 2,
  },
  "ts": "string",
}
`;

exports[`draft4 minProperties.json Test minProperties validation 1`] = `
Object {
  "schema": Object {
    "minProperties": 1,
  },
  "ts": "any",
}
`;

exports[`draft4 minimum.json Test exclusiveMinimum validation 1`] = `
Object {
  "schema": Object {
    "exclusiveMinimum": true,
    "minimum": 1.1,
  },
  "ts": "number",
}
`;

exports[`draft4 minimum.json Test minimum validation (explicit false exclusivity) 1`] = `
Object {
  "schema": Object {
    "exclusiveMinimum": false,
    "minimum": 1.1,
  },
  "ts": "number",
}
`;

exports[`draft4 minimum.json Test minimum validation 1`] = `
Object {
  "schema": Object {
    "minimum": 1.1,
  },
  "ts": "number",
}
`;

exports[`draft4 minimum.json Test minimum validation with signed integer 1`] = `
Object {
  "schema": Object {
    "minimum": -2,
  },
  "ts": "number",
}
`;

exports[`draft4 multipleOf.json Test by int 1`] = `
Object {
  "schema": Object {
    "multipleOf": 2,
  },
  "ts": "any",
}
`;

exports[`draft4 multipleOf.json Test by number 1`] = `
Object {
  "schema": Object {
    "multipleOf": 1.5,
  },
  "ts": "any",
}
`;

exports[`draft4 multipleOf.json Test by small number 1`] = `
Object {
  "schema": Object {
    "multipleOf": 0.0001,
  },
  "ts": "any",
}
`;

exports[`draft4 not.json Test forbidden property 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {
        "not": Object {},
      },
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft4 not.json Test not 1`] = `
Object {
  "schema": Object {
    "not": Object {
      "type": "integer",
    },
  },
  "ts": "any",
}
`;

exports[`draft4 not.json Test not more complex schema 1`] = `
Object {
  "schema": Object {
    "not": Object {
      "properties": Object {
        "foo": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
  },
  "ts": "any",
}
`;

exports[`draft4 not.json Test not multiple types 1`] = `
Object {
  "schema": Object {
    "not": Object {
      "type": Array [
        "integer",
        "boolean",
      ],
    },
  },
  "ts": "any",
}
`;

exports[`draft4 oneOf.json Test oneOf 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "type": "integer",
      },
      Object {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number",
}
`;

exports[`draft4 oneOf.json Test oneOf complex types 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
        },
        "required": Array [
          "bar",
        ],
      },
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
} | {
    foo: string;
    [key: string]: any;
}",
}
`;

exports[`draft4 oneOf.json Test oneOf with base schema 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "minLength": 2,
      },
      Object {
        "maxLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string",
}
`;

exports[`draft4 oneOf.json Test oneOf with empty schema 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "type": "number",
      },
      Object {},
    ],
  },
  "ts": "number | any",
}
`;

exports[`draft4 oneOf.json Test oneOf with required 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "required": Array [
          "foo",
          "bar",
        ],
      },
      Object {
        "required": Array [
          "foo",
          "baz",
        ],
      },
    ],
    "type": "object",
  },
  "ts": "any | any",
}
`;

exports[`draft4 pattern.json Test pattern is not anchored 1`] = `
Object {
  "schema": Object {
    "pattern": "a+",
  },
  "ts": "string",
}
`;

exports[`draft4 pattern.json Test pattern validation 1`] = `
Object {
  "schema": Object {
    "pattern": "^a*$",
  },
  "ts": "string",
}
`;

exports[`draft4 patternProperties.json Test multiple simultaneous patternProperties are validated 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "a*": Object {
        "type": "integer",
      },
      "aaa*": Object {
        "maximum": 20,
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft4 patternProperties.json Test patternProperties validates properties matching a regex 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "f.*o": Object {
        "type": "integer",
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft4 patternProperties.json Test regexes are not anchored by default and are case sensitive 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "X_": Object {
        "type": "string",
      },
      "[0-9]{2,}": Object {
        "type": "boolean",
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft4 properties.json Test object properties validation 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "type": "string",
      },
      "foo": Object {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: string;
    [key: string]: any;
}",
}
`;

exports[`draft4 properties.json Test properties with escaped characters 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo	bar": Object {
        "type": "number",
      },
      "foo
bar": Object {
        "type": "number",
      },
      "foobar": Object {
        "type": "number",
      },
      "foo
bar": Object {
        "type": "number",
      },
      "foo\\"bar": Object {
        "type": "number",
      },
      "foo\\\\bar": Object {
        "type": "number",
      },
    },
  },
  "ts": "{
    foo
bar?: number;
    foo\\"bar?: number;
    foo\\\\bar?: number;
    foo
bar?: number;
    foo	bar?: number;
    foobar?: number;
    [key: string]: any;
}",
}
`;

exports[`draft4 properties.json Test properties, patternProperties, additionalProperties interaction 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "integer",
    },
    "patternProperties": Object {
      "f.o": Object {
        "minItems": 2,
      },
    },
    "properties": Object {
      "bar": Object {
        "type": "array",
      },
      "foo": Object {
        "maxItems": 3,
        "type": "array",
      },
    },
  },
  "ts": "{
    foo?: any[];
    bar?: any;
    [key: string]: number;
}",
}
`;

exports[`draft4 ref.json Test Recursive references between schemas 1`] = `
Object {
  "schema": Object {
    "definitions": Object {
      "node": Object {
        "description": "node",
        "id": "http://localhost:1234/node",
        "properties": Object {
          "subtree": Object {
            "$ref": "tree",
          },
          "value": Object {
            "type": "number",
          },
        },
        "required": Array [
          "value",
        ],
        "type": "object",
      },
    },
    "description": "tree of nodes",
    "id": "http://localhost:1234/tree",
    "properties": Object {
      "meta": Object {
        "type": "string",
      },
      "nodes": Object {
        "items": Object {
          "$ref": "node",
        },
        "type": "array",
      },
    },
    "required": Array [
      "meta",
      "nodes",
    ],
    "type": "object",
  },
  "ts": "{
    meta: string;
    nodes: node#[];
    [key: string]: any;
}

export interface node# {
    value: number;
    subtree?: tree#;
    [key: string]: any;
}

export interface tree# {
    meta: string;
    nodes: node#[];
    [key: string]: any;
}",
}
`;

exports[`draft4 ref.json Test escaped pointer ref 1`] = `
Object {
  "schema": Object {
    "percent%field": Object {
      "type": "integer",
    },
    "properties": Object {
      "percent": Object {
        "$ref": "#/percent%25field",
      },
      "slash": Object {
        "$ref": "#/slash~1field",
      },
      "tilda": Object {
        "$ref": "#/tilda~0field",
      },
    },
    "slash/field": Object {
      "type": "integer",
    },
    "tilda~field": Object {
      "type": "integer",
    },
  },
  "ts": "{
    tilda?: tilda~0field;
    slash?: slash~1field;
    percent?: percent%25field;
    [key: string]: any;
}

export type tilda~0field = number;

export type slash~1field = number;

export type percent%25field = number;",
}
`;

exports[`draft4 ref.json Test nested refs 1`] = `
Object {
  "schema": Object {
    "$ref": "#/definitions/c",
    "definitions": Object {
      "a": Object {
        "type": "integer",
      },
      "b": Object {
        "$ref": "#/definitions/a",
      },
      "c": Object {
        "$ref": "#/definitions/b",
      },
    },
  },
  "ts": "c

export type c = b;

export type b = a;

export type a = number;",
}
`;

exports[`draft4 ref.json Test property named $ref that is not a reference 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "$ref": Object {
        "type": "string",
      },
    },
  },
  "ts": "{
    $ref?: string;
    [key: string]: any;
}",
}
`;

exports[`draft4 ref.json Test ref overrides any sibling keywords 1`] = `
Object {
  "schema": Object {
    "definitions": Object {
      "reffed": Object {
        "type": "array",
      },
    },
    "properties": Object {
      "foo": Object {
        "$ref": "#/definitions/reffed",
        "maxItems": 2,
      },
    },
  },
  "ts": "{
    foo?: reffed;
    [key: string]: any;
}

export type reffed = any;",
}
`;

exports[`draft4 ref.json Test refs with quote 1`] = `
Object {
  "schema": Object {
    "definitions": Object {
      "foo\\"bar": Object {
        "type": "number",
      },
    },
    "properties": Object {
      "foo\\"bar": Object {
        "$ref": "#/definitions/foo%22bar",
      },
    },
  },
  "ts": "{
    foo\\"bar?: foo%22bar;
    [key: string]: any;
}

export type foo%22bar = number;",
}
`;

exports[`draft4 ref.json Test relative pointer ref to array 1`] = `
Object {
  "schema": Object {
    "items": Array [
      Object {
        "type": "integer",
      },
      Object {
        "$ref": "#/items/0",
      },
    ],
  },
  "ts": "(number | 0)[]

export type 0 = number;",
}
`;

exports[`draft4 ref.json Test relative pointer ref to object 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "$ref": "#/properties/foo",
      },
      "foo": Object {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: foo;
    [key: string]: any;
}

export type foo = number;",
}
`;

exports[`draft4 ref.json Test remote ref, containing refs itself 1`] = `
Object {
  "schema": Object {
    "$ref": "http://json-schema.org/draft-04/schema#",
  },
  "ts": "schema#

export interface schema# {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: boolean;
    minimum?: number;
    exclusiveMinimum?: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems?: boolean | #;
    items?: # | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems?: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties?: boolean | #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type positiveInteger = number;

export type positiveIntegerDefault0 = positiveInteger & any;

export interface # {
    id?: string;
    $schema?: string;
    title?: string;
    description?: string;
    default?: any;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: boolean;
    minimum?: number;
    exclusiveMinimum?: boolean;
    maxLength?: positiveInteger;
    minLength?: positiveIntegerDefault0;
    pattern?: string;
    additionalItems?: boolean | #;
    items?: # | schemaArray;
    maxItems?: positiveInteger;
    minItems?: positiveIntegerDefault0;
    uniqueItems?: boolean;
    maxProperties?: positiveInteger;
    minProperties?: positiveIntegerDefault0;
    required?: stringArray;
    additionalProperties?: boolean | #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type schemaArray = #[];

export type stringArray = string[];

export type simpleTypes = \\"array\\" | \\"boolean\\" | \\"integer\\" | \\"null\\" | \\"number\\" | \\"object\\" | \\"string\\";",
}
`;

exports[`draft4 ref.json Test root pointer ref 1`] = `
Object {
  "schema": Object {
    "additionalProperties": false,
    "properties": Object {
      "foo": Object {
        "$ref": "#",
      },
    },
  },
  "ts": "{
    foo?: #;
}

export interface # {
    foo?: #;
}",
}
`;

exports[`draft4 refRemote.json Test base URI change - change folder 1`] = `
Object {
  "schema": Object {
    "definitions": Object {
      "baz": Object {
        "id": "folder/",
        "items": Object {
          "$ref": "folderInteger.json",
        },
        "type": "array",
      },
    },
    "id": "http://localhost:1234/scope_change_defs1.json",
    "properties": Object {
      "list": Object {
        "$ref": "#/definitions/baz",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: baz;
    [key: string]: any;
}

export type baz = folderInteger.json#[];

export type folderInteger.json# = number;",
}
`;

exports[`draft4 refRemote.json Test base URI change - change folder in subschema 1`] = `
Object {
  "schema": Object {
    "definitions": Object {
      "baz": Object {
        "definitions": Object {
          "bar": Object {
            "items": Object {
              "$ref": "folderInteger.json",
            },
            "type": "array",
          },
        },
        "id": "folder/",
      },
    },
    "id": "http://localhost:1234/scope_change_defs2.json",
    "properties": Object {
      "list": Object {
        "$ref": "#/definitions/baz/definitions/bar",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: bar;
    [key: string]: any;
}

export type bar = folderInteger.json#[];

export type folderInteger.json# = number;",
}
`;

exports[`draft4 refRemote.json Test base URI change 1`] = `
Object {
  "schema": Object {
    "id": "http://localhost:1234/",
    "items": Object {
      "id": "folder/",
      "items": Object {
        "$ref": "folderInteger.json",
      },
    },
  },
  "ts": "folderInteger.json#[][]

export type folderInteger.json# = number;",
}
`;

exports[`draft4 refRemote.json Test fragment within remote ref 1`] = `
Object {
  "schema": Object {
    "$ref": "http://localhost:1234/subSchemas.json#/integer",
  },
  "ts": "integer

export type integer = number;",
}
`;

exports[`draft4 refRemote.json Test ref within remote ref 1`] = `
Object {
  "schema": Object {
    "$ref": "http://localhost:1234/subSchemas.json#/refToInteger",
  },
  "ts": "refToInteger

export type refToInteger = integer;

export type integer = number;",
}
`;

exports[`draft4 refRemote.json Test remote ref 1`] = `
Object {
  "schema": Object {
    "$ref": "http://localhost:1234/integer.json",
  },
  "ts": "integer.json#

export type integer.json# = number;",
}
`;

exports[`draft4 refRemote.json Test root ref in remote ref 1`] = `
Object {
  "schema": Object {
    "id": "http://localhost:1234/object",
    "properties": Object {
      "name": Object {
        "$ref": "name.json#/definitions/orNull",
      },
    },
    "type": "object",
  },
  "ts": "{
    name?: orNull;
    [key: string]: any;
}

export type orNull = any | #;

export type # = string;",
}
`;

exports[`draft4 required.json Test required default validation 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft4 required.json Test required validation 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
    "required": Array [
      "foo",
    ],
  },
  "ts": "{
    foo: any;
    bar?: any;
    [key: string]: any;
}",
}
`;

exports[`draft4 required.json Test required with escaped characters 1`] = `
Object {
  "schema": Object {
    "required": Array [
      "foo
bar",
      "foo\\"bar",
      "foo\\\\bar",
      "foo
bar",
      "foo	bar",
      "foobar",
    ],
  },
  "ts": "any",
}
`;

exports[`draft4 type.json Test array type matches arrays 1`] = `
Object {
  "schema": Object {
    "type": "array",
  },
  "ts": "any",
}
`;

exports[`draft4 type.json Test boolean type matches booleans 1`] = `
Object {
  "schema": Object {
    "type": "boolean",
  },
  "ts": "boolean",
}
`;

exports[`draft4 type.json Test integer type matches integers 1`] = `
Object {
  "schema": Object {
    "type": "integer",
  },
  "ts": "number",
}
`;

exports[`draft4 type.json Test multiple types can be specified in an array 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "integer",
      "string",
    ],
  },
  "ts": "number | string",
}
`;

exports[`draft4 type.json Test null type matches only the null object 1`] = `
Object {
  "schema": Object {
    "type": "null",
  },
  "ts": "any",
}
`;

exports[`draft4 type.json Test number type matches numbers 1`] = `
Object {
  "schema": Object {
    "type": "number",
  },
  "ts": "number",
}
`;

exports[`draft4 type.json Test object type matches objects 1`] = `
Object {
  "schema": Object {
    "type": "object",
  },
  "ts": "any",
}
`;

exports[`draft4 type.json Test string type matches strings 1`] = `
Object {
  "schema": Object {
    "type": "string",
  },
  "ts": "string",
}
`;

exports[`draft4 type.json Test type as array with one item 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "string",
    ],
  },
  "ts": "string",
}
`;

exports[`draft4 type.json Test type: array or object 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "array",
      "object",
    ],
  },
  "ts": "any[] | object",
}
`;

exports[`draft4 type.json Test type: array, object or null 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "array",
      "object",
      "null",
    ],
  },
  "ts": "any[] | object | null",
}
`;

exports[`draft4 uniqueItems.json Test uniqueItems validation 1`] = `
Object {
  "schema": Object {
    "uniqueItems": true,
  },
  "ts": "any",
}
`;

exports[`draft6 additionalItems.json Test additionalItems are allowed by default 1`] = `
Object {
  "schema": Object {
    "items": Array [
      Object {
        "type": "integer",
      },
    ],
  },
  "ts": "(number)[]",
}
`;

exports[`draft6 additionalItems.json Test additionalItems as false without items 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
  },
  "ts": "any",
}
`;

exports[`draft6 additionalItems.json Test additionalItems as schema 1`] = `
Object {
  "schema": Object {
    "additionalItems": Object {
      "type": "integer",
    },
    "items": Array [
      Object {},
    ],
  },
  "ts": "(any | number)[]",
}
`;

exports[`draft6 additionalItems.json Test array of items with no additionalItems 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
    "items": Array [
      Object {},
      Object {},
      Object {},
    ],
  },
  "ts": "[any, any, any]",
}
`;

exports[`draft6 additionalItems.json Test items is schema, no additionalItems 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
    "items": Object {},
  },
  "ts": "any[]",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties allows a schema which should validate 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "boolean",
    },
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: boolean;
}",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties are allowed by default 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: any;
}",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties being false does not allow other properties 1`] = `
Object {
  "schema": Object {
    "additionalProperties": false,
    "patternProperties": Object {
      "^v": Object {},
    },
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
}",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties can exist by itself 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "boolean",
    },
  },
  "ts": "any",
}
`;

exports[`draft6 additionalProperties.json Test additionalProperties should not look in applicators 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "boolean",
    },
    "allOf": Array [
      Object {
        "properties": Object {
          "foo": Object {},
        },
      },
    ],
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft6 additionalProperties.json Test non-ASCII pattern with additionalProperties 1`] = `
Object {
  "schema": Object {
    "additionalProperties": false,
    "patternProperties": Object {
      "^รก": Object {},
    },
  },
  "ts": "any",
}
`;

exports[`draft6 allOf.json Test allOf 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
        },
        "required": Array [
          "bar",
        ],
      },
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
} & {
    foo: string;
    [key: string]: any;
}",
}
`;

exports[`draft6 allOf.json Test allOf simple types 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "maximum": 30,
      },
      Object {
        "minimum": 20,
      },
    ],
  },
  "ts": "number & number",
}
`;

exports[`draft6 allOf.json Test allOf with base schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
      Object {
        "properties": Object {
          "baz": Object {
            "type": "null",
          },
        },
        "required": Array [
          "baz",
        ],
      },
    ],
    "properties": Object {
      "bar": Object {
        "type": "integer",
      },
    },
    "required": Array [
      "bar",
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
}",
}
`;

exports[`draft6 allOf.json Test allOf with boolean schemas, all false 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      false,
      false,
    ],
  },
  "ts": "void & void",
}
`;

exports[`draft6 allOf.json Test allOf with boolean schemas, all true 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      true,
      true,
    ],
  },
  "ts": "any & any",
}
`;

exports[`draft6 allOf.json Test allOf with boolean schemas, some false 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      true,
      false,
    ],
  },
  "ts": "any & void",
}
`;

exports[`draft6 allOf.json Test allOf with one empty schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {},
    ],
  },
  "ts": "any",
}
`;

exports[`draft6 allOf.json Test allOf with the first empty schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {},
      Object {
        "type": "number",
      },
    ],
  },
  "ts": "any & number",
}
`;

exports[`draft6 allOf.json Test allOf with the last empty schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "type": "number",
      },
      Object {},
    ],
  },
  "ts": "number & any",
}
`;

exports[`draft6 allOf.json Test allOf with two empty schemas 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {},
      Object {},
    ],
  },
  "ts": "any & any",
}
`;

exports[`draft6 anyOf.json Test anyOf 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "type": "integer",
      },
      Object {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number",
}
`;

exports[`draft6 anyOf.json Test anyOf complex types 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
        },
        "required": Array [
          "bar",
        ],
      },
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
} | {
    foo: string;
    [key: string]: any;
}",
}
`;

exports[`draft6 anyOf.json Test anyOf with base schema 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "maxLength": 2,
      },
      Object {
        "minLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string",
}
`;

exports[`draft6 anyOf.json Test anyOf with boolean schemas, all false 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      false,
      false,
    ],
  },
  "ts": "void | void",
}
`;

exports[`draft6 anyOf.json Test anyOf with boolean schemas, all true 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      true,
      true,
    ],
  },
  "ts": "any | any",
}
`;

exports[`draft6 anyOf.json Test anyOf with boolean schemas, some true 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      true,
      false,
    ],
  },
  "ts": "any | void",
}
`;

exports[`draft6 anyOf.json Test anyOf with one empty schema 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "type": "number",
      },
      Object {},
    ],
  },
  "ts": "number | any",
}
`;

exports[`draft6 boolean_schema.json Test boolean schema 'false' 1`] = `
Object {
  "schema": false,
  "ts": "void",
}
`;

exports[`draft6 boolean_schema.json Test boolean schema 'true' 1`] = `
Object {
  "schema": true,
  "ts": "any",
}
`;

exports[`draft6 const.json Test const validation 1`] = `
Object {
  "schema": Object {
    "const": 2,
  },
  "ts": "2",
}
`;

exports[`draft6 const.json Test const with array 1`] = `
Object {
  "schema": Object {
    "const": Array [
      Object {
        "foo": "bar",
      },
    ],
  },
  "ts": "any",
}
`;

exports[`draft6 const.json Test const with null 1`] = `
Object {
  "schema": Object {
    "const": null,
  },
  "ts": "any",
}
`;

exports[`draft6 const.json Test const with object 1`] = `
Object {
  "schema": Object {
    "const": Object {
      "baz": "bax",
      "foo": "bar",
    },
  },
  "ts": "any",
}
`;

exports[`draft6 contains.json Test contains keyword validation 1`] = `
Object {
  "schema": Object {
    "contains": Object {
      "minimum": 5,
    },
  },
  "ts": "any",
}
`;

exports[`draft6 contains.json Test contains keyword with boolean schema false 1`] = `
Object {
  "schema": Object {
    "contains": false,
  },
  "ts": "any",
}
`;

exports[`draft6 contains.json Test contains keyword with boolean schema true 1`] = `
Object {
  "schema": Object {
    "contains": true,
  },
  "ts": "any",
}
`;

exports[`draft6 contains.json Test contains keyword with const keyword 1`] = `
Object {
  "schema": Object {
    "contains": Object {
      "const": 5,
    },
  },
  "ts": "any",
}
`;

exports[`draft6 default.json Test invalid string value for default 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "default": "bad",
        "minLength": 4,
        "type": "string",
      },
    },
  },
  "ts": "{
    bar?: string;
    [key: string]: any;
}",
}
`;

exports[`draft6 default.json Test invalid type for default 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {
        "default": Array [],
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    [key: string]: any;
}",
}
`;

exports[`draft6 definitions.json Test invalid definition 1`] = `
Object {
  "schema": Object {
    "$ref": "http://json-schema.org/draft-06/schema#",
  },
  "ts": "schema#

export interface schema# {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface # {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type schemaArray = #[];

export type stringArray = string[];

export type simpleTypes = \\"array\\" | \\"boolean\\" | \\"integer\\" | \\"null\\" | \\"number\\" | \\"object\\" | \\"string\\";",
}
`;

exports[`draft6 definitions.json Test valid definition 1`] = `
Object {
  "schema": Object {
    "$ref": "http://json-schema.org/draft-06/schema#",
  },
  "ts": "schema#

export interface schema# {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface # {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type schemaArray = #[];

export type stringArray = string[];

export type simpleTypes = \\"array\\" | \\"boolean\\" | \\"integer\\" | \\"null\\" | \\"number\\" | \\"object\\" | \\"string\\";",
}
`;

exports[`draft6 dependencies.json Test dependencies 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": Array [
        "foo",
      ],
    },
  },
  "ts": "any",
}
`;

exports[`draft6 dependencies.json Test dependencies with boolean subschemas 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "any",
}
`;

exports[`draft6 dependencies.json Test dependencies with empty array 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": Array [],
    },
  },
  "ts": "any",
}
`;

exports[`draft6 dependencies.json Test dependencies with escaped characters 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "foo	bar": Object {
        "minProperties": 4,
      },
      "foo
bar": Array [
        "foo
bar",
      ],
      "foo\\"bar": Array [
        "foo'bar",
      ],
      "foo'bar": Object {
        "required": Array [
          "foo\\"bar",
        ],
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft6 dependencies.json Test empty array of dependencies 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "foo": Array [],
    },
  },
  "ts": "any",
}
`;

exports[`draft6 dependencies.json Test multiple dependencies 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "quux": Array [
        "foo",
        "bar",
      ],
    },
  },
  "ts": "any",
}
`;

exports[`draft6 dependencies.json Test multiple dependencies subschema 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
          "foo": Object {
            "type": "integer",
          },
        },
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft6 enum.json Test enum with escaped characters 1`] = `
Object {
  "schema": Object {
    "enum": Array [
      "foo
bar",
      "foo
bar",
    ],
  },
  "ts": "\\"foo\\\\nbar\\" | \\"foo\\\\rbar\\"",
}
`;

exports[`draft6 enum.json Test enums in properties 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "enum": Array [
          "bar",
        ],
      },
      "foo": Object {
        "enum": Array [
          "foo",
        ],
      },
    },
    "required": Array [
      "bar",
    ],
    "type": "object",
  },
  "ts": "{
    foo?: \\"foo\\";
    bar: \\"bar\\";
    [key: string]: any;
}",
}
`;

exports[`draft6 enum.json Test heterogeneous enum validation 1`] = `
Object {
  "schema": Object {
    "enum": Array [
      6,
      "foo",
      Array [],
      true,
      Object {
        "foo": 12,
      },
    ],
  },
  "ts": "6 | \\"foo\\" | any | true | any",
}
`;

exports[`draft6 enum.json Test simple enum validation 1`] = `
Object {
  "schema": Object {
    "enum": Array [
      1,
      2,
      3,
    ],
  },
  "ts": "1 | 2 | 3",
}
`;

exports[`draft6 exclusiveMaximum.json Test exclusiveMaximum validation 1`] = `
Object {
  "schema": Object {
    "exclusiveMaximum": 3,
  },
  "ts": "number",
}
`;

exports[`draft6 exclusiveMinimum.json Test exclusiveMinimum validation 1`] = `
Object {
  "schema": Object {
    "exclusiveMinimum": 1.1,
  },
  "ts": "number",
}
`;

exports[`draft6 items.json Test a schema given for items 1`] = `
Object {
  "schema": Object {
    "items": Object {
      "type": "integer",
    },
  },
  "ts": "number[]",
}
`;

exports[`draft6 items.json Test an array of schemas for items 1`] = `
Object {
  "schema": Object {
    "items": Array [
      Object {
        "type": "integer",
      },
      Object {
        "type": "string",
      },
    ],
  },
  "ts": "(number | string)[]",
}
`;

exports[`draft6 items.json Test items and subitems 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
    "definitions": Object {
      "item": Object {
        "additionalItems": false,
        "items": Array [
          Object {
            "$ref": "#/definitions/sub-item",
          },
          Object {
            "$ref": "#/definitions/sub-item",
          },
        ],
        "type": "array",
      },
      "sub-item": Object {
        "required": Array [
          "foo",
        ],
        "type": "object",
      },
    },
    "items": Array [
      Object {
        "$ref": "#/definitions/item",
      },
      Object {
        "$ref": "#/definitions/item",
      },
      Object {
        "$ref": "#/definitions/item",
      },
    ],
    "type": "array",
  },
  "ts": "[item, item, item]

export type item = [sub-item, sub-item];

export type sub-item = any;",
}
`;

exports[`draft6 items.json Test items with boolean schema (false) 1`] = `
Object {
  "schema": Object {
    "items": false,
  },
  "ts": "any",
}
`;

exports[`draft6 items.json Test items with boolean schema (true) 1`] = `
Object {
  "schema": Object {
    "items": true,
  },
  "ts": "any[]",
}
`;

exports[`draft6 items.json Test items with boolean schemas 1`] = `
Object {
  "schema": Object {
    "items": Array [
      true,
      false,
    ],
  },
  "ts": "(any | void)[]",
}
`;

exports[`draft6 items.json Test nested items 1`] = `
Object {
  "schema": Object {
    "items": Object {
      "items": Object {
        "items": Object {
          "items": Object {
            "type": "number",
          },
          "type": "array",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "array",
  },
  "ts": "number[][][][]",
}
`;

exports[`draft6 maxItems.json Test maxItems validation 1`] = `
Object {
  "schema": Object {
    "maxItems": 2,
  },
  "ts": "any[]",
}
`;

exports[`draft6 maxLength.json Test maxLength validation 1`] = `
Object {
  "schema": Object {
    "maxLength": 2,
  },
  "ts": "string",
}
`;

exports[`draft6 maxProperties.json Test maxProperties validation 1`] = `
Object {
  "schema": Object {
    "maxProperties": 2,
  },
  "ts": "any",
}
`;

exports[`draft6 maximum.json Test maximum validation 1`] = `
Object {
  "schema": Object {
    "maximum": 3,
  },
  "ts": "number",
}
`;

exports[`draft6 minItems.json Test minItems validation 1`] = `
Object {
  "schema": Object {
    "minItems": 1,
  },
  "ts": "any[]",
}
`;

exports[`draft6 minLength.json Test minLength validation 1`] = `
Object {
  "schema": Object {
    "minLength": 2,
  },
  "ts": "string",
}
`;

exports[`draft6 minProperties.json Test minProperties validation 1`] = `
Object {
  "schema": Object {
    "minProperties": 1,
  },
  "ts": "any",
}
`;

exports[`draft6 minimum.json Test minimum validation 1`] = `
Object {
  "schema": Object {
    "minimum": 1.1,
  },
  "ts": "number",
}
`;

exports[`draft6 minimum.json Test minimum validation with signed integer 1`] = `
Object {
  "schema": Object {
    "minimum": -2,
  },
  "ts": "number",
}
`;

exports[`draft6 multipleOf.json Test by int 1`] = `
Object {
  "schema": Object {
    "multipleOf": 2,
  },
  "ts": "any",
}
`;

exports[`draft6 multipleOf.json Test by number 1`] = `
Object {
  "schema": Object {
    "multipleOf": 1.5,
  },
  "ts": "any",
}
`;

exports[`draft6 multipleOf.json Test by small number 1`] = `
Object {
  "schema": Object {
    "multipleOf": 0.0001,
  },
  "ts": "any",
}
`;

exports[`draft6 not.json Test forbidden property 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {
        "not": Object {},
      },
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft6 not.json Test not 1`] = `
Object {
  "schema": Object {
    "not": Object {
      "type": "integer",
    },
  },
  "ts": "any",
}
`;

exports[`draft6 not.json Test not more complex schema 1`] = `
Object {
  "schema": Object {
    "not": Object {
      "properties": Object {
        "foo": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
  },
  "ts": "any",
}
`;

exports[`draft6 not.json Test not multiple types 1`] = `
Object {
  "schema": Object {
    "not": Object {
      "type": Array [
        "integer",
        "boolean",
      ],
    },
  },
  "ts": "any",
}
`;

exports[`draft6 not.json Test not with boolean schema false 1`] = `
Object {
  "schema": Object {
    "not": false,
  },
  "ts": "any",
}
`;

exports[`draft6 not.json Test not with boolean schema true 1`] = `
Object {
  "schema": Object {
    "not": true,
  },
  "ts": "any",
}
`;

exports[`draft6 oneOf.json Test oneOf 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "type": "integer",
      },
      Object {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number",
}
`;

exports[`draft6 oneOf.json Test oneOf complex types 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
        },
        "required": Array [
          "bar",
        ],
      },
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
} | {
    foo: string;
    [key: string]: any;
}",
}
`;

exports[`draft6 oneOf.json Test oneOf with base schema 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "minLength": 2,
      },
      Object {
        "maxLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string",
}
`;

exports[`draft6 oneOf.json Test oneOf with boolean schemas, all false 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      false,
      false,
      false,
    ],
  },
  "ts": "void | void | void",
}
`;

exports[`draft6 oneOf.json Test oneOf with boolean schemas, all true 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      true,
      true,
      true,
    ],
  },
  "ts": "any | any | any",
}
`;

exports[`draft6 oneOf.json Test oneOf with boolean schemas, more than one true 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      true,
      true,
      false,
    ],
  },
  "ts": "any | any | void",
}
`;

exports[`draft6 oneOf.json Test oneOf with boolean schemas, one true 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      true,
      false,
      false,
    ],
  },
  "ts": "any | void | void",
}
`;

exports[`draft6 oneOf.json Test oneOf with empty schema 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "type": "number",
      },
      Object {},
    ],
  },
  "ts": "number | any",
}
`;

exports[`draft6 oneOf.json Test oneOf with required 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "required": Array [
          "foo",
          "bar",
        ],
      },
      Object {
        "required": Array [
          "foo",
          "baz",
        ],
      },
    ],
    "type": "object",
  },
  "ts": "any | any",
}
`;

exports[`draft6 pattern.json Test pattern is not anchored 1`] = `
Object {
  "schema": Object {
    "pattern": "a+",
  },
  "ts": "string",
}
`;

exports[`draft6 pattern.json Test pattern validation 1`] = `
Object {
  "schema": Object {
    "pattern": "^a*$",
  },
  "ts": "string",
}
`;

exports[`draft6 patternProperties.json Test multiple simultaneous patternProperties are validated 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "a*": Object {
        "type": "integer",
      },
      "aaa*": Object {
        "maximum": 20,
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft6 patternProperties.json Test patternProperties validates properties matching a regex 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "f.*o": Object {
        "type": "integer",
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft6 patternProperties.json Test patternProperties with boolean schemas 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "b.*": false,
      "f.*": true,
    },
  },
  "ts": "any",
}
`;

exports[`draft6 patternProperties.json Test regexes are not anchored by default and are case sensitive 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "X_": Object {
        "type": "string",
      },
      "[0-9]{2,}": Object {
        "type": "boolean",
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft6 properties.json Test object properties validation 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "type": "string",
      },
      "foo": Object {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: string;
    [key: string]: any;
}",
}
`;

exports[`draft6 properties.json Test properties with boolean schema 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "{
    foo?: any;
    bar?: void;
    [key: string]: any;
}",
}
`;

exports[`draft6 properties.json Test properties with escaped characters 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo	bar": Object {
        "type": "number",
      },
      "foo
bar": Object {
        "type": "number",
      },
      "foobar": Object {
        "type": "number",
      },
      "foo
bar": Object {
        "type": "number",
      },
      "foo\\"bar": Object {
        "type": "number",
      },
      "foo\\\\bar": Object {
        "type": "number",
      },
    },
  },
  "ts": "{
    foo
bar?: number;
    foo\\"bar?: number;
    foo\\\\bar?: number;
    foo
bar?: number;
    foo	bar?: number;
    foobar?: number;
    [key: string]: any;
}",
}
`;

exports[`draft6 properties.json Test properties, patternProperties, additionalProperties interaction 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "integer",
    },
    "patternProperties": Object {
      "f.o": Object {
        "minItems": 2,
      },
    },
    "properties": Object {
      "bar": Object {
        "type": "array",
      },
      "foo": Object {
        "maxItems": 3,
        "type": "array",
      },
    },
  },
  "ts": "{
    foo?: any[];
    bar?: any;
    [key: string]: number;
}",
}
`;

exports[`draft6 propertyNames.json Test propertyNames validation 1`] = `
Object {
  "schema": Object {
    "propertyNames": Object {
      "maxLength": 3,
    },
  },
  "ts": "any",
}
`;

exports[`draft6 propertyNames.json Test propertyNames with boolean schema false 1`] = `
Object {
  "schema": Object {
    "propertyNames": false,
  },
  "ts": "any",
}
`;

exports[`draft6 propertyNames.json Test propertyNames with boolean schema true 1`] = `
Object {
  "schema": Object {
    "propertyNames": true,
  },
  "ts": "any",
}
`;

exports[`draft6 ref.json Test $ref to boolean schema false 1`] = `
Object {
  "schema": Object {
    "$ref": "#/definitions/bool",
    "definitions": Object {
      "bool": false,
    },
  },
  "ts": "bool

export type bool = bool;",
}
`;

exports[`draft6 ref.json Test $ref to boolean schema true 1`] = `
Object {
  "schema": Object {
    "$ref": "#/definitions/bool",
    "definitions": Object {
      "bool": true,
    },
  },
  "ts": "bool

export type bool = any;",
}
`;

exports[`draft6 ref.json Test Recursive references between schemas 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/tree",
    "definitions": Object {
      "node": Object {
        "$id": "http://localhost:1234/node",
        "description": "node",
        "properties": Object {
          "subtree": Object {
            "$ref": "tree",
          },
          "value": Object {
            "type": "number",
          },
        },
        "required": Array [
          "value",
        ],
        "type": "object",
      },
    },
    "description": "tree of nodes",
    "properties": Object {
      "meta": Object {
        "type": "string",
      },
      "nodes": Object {
        "items": Object {
          "$ref": "node",
        },
        "type": "array",
      },
    },
    "required": Array [
      "meta",
      "nodes",
    ],
    "type": "object",
  },
  "ts": "{
    meta: string;
    nodes: node#[];
    [key: string]: any;
}

export interface node# {
    value: number;
    subtree?: tree#;
    [key: string]: any;
}

export interface tree# {
    meta: string;
    nodes: node#[];
    [key: string]: any;
}",
}
`;

exports[`draft6 ref.json Test escaped pointer ref 1`] = `
Object {
  "schema": Object {
    "percent%field": Object {
      "type": "integer",
    },
    "properties": Object {
      "percent": Object {
        "$ref": "#/percent%25field",
      },
      "slash": Object {
        "$ref": "#/slash~1field",
      },
      "tilda": Object {
        "$ref": "#/tilda~0field",
      },
    },
    "slash/field": Object {
      "type": "integer",
    },
    "tilda~field": Object {
      "type": "integer",
    },
  },
  "ts": "{
    tilda?: tilda~0field;
    slash?: slash~1field;
    percent?: percent%25field;
    [key: string]: any;
}

export type tilda~0field = number;

export type slash~1field = number;

export type percent%25field = number;",
}
`;

exports[`draft6 ref.json Test nested refs 1`] = `
Object {
  "schema": Object {
    "$ref": "#/definitions/c",
    "definitions": Object {
      "a": Object {
        "type": "integer",
      },
      "b": Object {
        "$ref": "#/definitions/a",
      },
      "c": Object {
        "$ref": "#/definitions/b",
      },
    },
  },
  "ts": "c

export type c = b;

export type b = a;

export type a = number;",
}
`;

exports[`draft6 ref.json Test property named $ref that is not a reference 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "$ref": Object {
        "type": "string",
      },
    },
  },
  "ts": "{
    $ref?: string;
    [key: string]: any;
}",
}
`;

exports[`draft6 ref.json Test ref overrides any sibling keywords 1`] = `
Object {
  "schema": Object {
    "definitions": Object {
      "reffed": Object {
        "type": "array",
      },
    },
    "properties": Object {
      "foo": Object {
        "$ref": "#/definitions/reffed",
        "maxItems": 2,
      },
    },
  },
  "ts": "{
    foo?: reffed;
    [key: string]: any;
}

export type reffed = any;",
}
`;

exports[`draft6 ref.json Test refs with quote 1`] = `
Object {
  "schema": Object {
    "definitions": Object {
      "foo\\"bar": Object {
        "type": "number",
      },
    },
    "properties": Object {
      "foo\\"bar": Object {
        "$ref": "#/definitions/foo%22bar",
      },
    },
  },
  "ts": "{
    foo\\"bar?: foo%22bar;
    [key: string]: any;
}

export type foo%22bar = number;",
}
`;

exports[`draft6 ref.json Test relative pointer ref to array 1`] = `
Object {
  "schema": Object {
    "items": Array [
      Object {
        "type": "integer",
      },
      Object {
        "$ref": "#/items/0",
      },
    ],
  },
  "ts": "(number | 0)[]

export type 0 = number;",
}
`;

exports[`draft6 ref.json Test relative pointer ref to object 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "$ref": "#/properties/foo",
      },
      "foo": Object {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: foo;
    [key: string]: any;
}

export type foo = number;",
}
`;

exports[`draft6 ref.json Test remote ref, containing refs itself 1`] = `
Object {
  "schema": Object {
    "$ref": "http://json-schema.org/draft-06/schema#",
  },
  "ts": "schema#

export interface schema# {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface # {
    $id?: string;
    $schema?: string;
    $ref?: string;
    title?: string;
    description?: string;
    default?: any;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type schemaArray = #[];

export type stringArray = string[];

export type simpleTypes = \\"array\\" | \\"boolean\\" | \\"integer\\" | \\"null\\" | \\"number\\" | \\"object\\" | \\"string\\";",
}
`;

exports[`draft6 ref.json Test root pointer ref 1`] = `
Object {
  "schema": Object {
    "additionalProperties": false,
    "properties": Object {
      "foo": Object {
        "$ref": "#",
      },
    },
  },
  "ts": "{
    foo?: #;
}

export interface # {
    foo?: #;
}",
}
`;

exports[`draft6 refRemote.json Test base URI change - change folder 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/scope_change_defs1.json",
    "definitions": Object {
      "baz": Object {
        "$id": "folder/",
        "items": Object {
          "$ref": "folderInteger.json",
        },
        "type": "array",
      },
    },
    "properties": Object {
      "list": Object {
        "$ref": "#/definitions/baz",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: baz;
    [key: string]: any;
}

export type baz = folderInteger.json#[];

export type folderInteger.json# = number;",
}
`;

exports[`draft6 refRemote.json Test base URI change - change folder in subschema 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/scope_change_defs2.json",
    "definitions": Object {
      "baz": Object {
        "$id": "folder/",
        "definitions": Object {
          "bar": Object {
            "items": Object {
              "$ref": "folderInteger.json",
            },
            "type": "array",
          },
        },
      },
    },
    "properties": Object {
      "list": Object {
        "$ref": "#/definitions/baz/definitions/bar",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: bar;
    [key: string]: any;
}

export type bar = folderInteger.json#[];

export type folderInteger.json# = number;",
}
`;

exports[`draft6 refRemote.json Test base URI change 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/",
    "items": Object {
      "$id": "folder/",
      "items": Object {
        "$ref": "folderInteger.json",
      },
    },
  },
  "ts": "folderInteger.json#[][]

export type folderInteger.json# = number;",
}
`;

exports[`draft6 refRemote.json Test fragment within remote ref 1`] = `
Object {
  "schema": Object {
    "$ref": "http://localhost:1234/subSchemas.json#/integer",
  },
  "ts": "integer

export type integer = number;",
}
`;

exports[`draft6 refRemote.json Test ref within remote ref 1`] = `
Object {
  "schema": Object {
    "$ref": "http://localhost:1234/subSchemas.json#/refToInteger",
  },
  "ts": "refToInteger

export type refToInteger = integer;

export type integer = number;",
}
`;

exports[`draft6 refRemote.json Test remote ref 1`] = `
Object {
  "schema": Object {
    "$ref": "http://localhost:1234/integer.json",
  },
  "ts": "integer.json#

export type integer.json# = number;",
}
`;

exports[`draft6 refRemote.json Test root ref in remote ref 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/object",
    "properties": Object {
      "name": Object {
        "$ref": "name.json#/definitions/orNull",
      },
    },
    "type": "object",
  },
  "ts": "{
    name?: orNull;
    [key: string]: any;
}

export type orNull = any | #;

export type # = string;",
}
`;

exports[`draft6 required.json Test required default validation 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft6 required.json Test required validation 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
    "required": Array [
      "foo",
    ],
  },
  "ts": "{
    foo: any;
    bar?: any;
    [key: string]: any;
}",
}
`;

exports[`draft6 required.json Test required with empty array 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {},
    },
    "required": Array [],
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft6 required.json Test required with escaped characters 1`] = `
Object {
  "schema": Object {
    "required": Array [
      "foo
bar",
      "foo\\"bar",
      "foo\\\\bar",
      "foo
bar",
      "foo	bar",
      "foobar",
    ],
  },
  "ts": "any",
}
`;

exports[`draft6 type.json Test array type matches arrays 1`] = `
Object {
  "schema": Object {
    "type": "array",
  },
  "ts": "any",
}
`;

exports[`draft6 type.json Test boolean type matches booleans 1`] = `
Object {
  "schema": Object {
    "type": "boolean",
  },
  "ts": "boolean",
}
`;

exports[`draft6 type.json Test integer type matches integers 1`] = `
Object {
  "schema": Object {
    "type": "integer",
  },
  "ts": "number",
}
`;

exports[`draft6 type.json Test multiple types can be specified in an array 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "integer",
      "string",
    ],
  },
  "ts": "number | string",
}
`;

exports[`draft6 type.json Test null type matches only the null object 1`] = `
Object {
  "schema": Object {
    "type": "null",
  },
  "ts": "any",
}
`;

exports[`draft6 type.json Test number type matches numbers 1`] = `
Object {
  "schema": Object {
    "type": "number",
  },
  "ts": "number",
}
`;

exports[`draft6 type.json Test object type matches objects 1`] = `
Object {
  "schema": Object {
    "type": "object",
  },
  "ts": "any",
}
`;

exports[`draft6 type.json Test string type matches strings 1`] = `
Object {
  "schema": Object {
    "type": "string",
  },
  "ts": "string",
}
`;

exports[`draft6 type.json Test type as array with one item 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "string",
    ],
  },
  "ts": "string",
}
`;

exports[`draft6 type.json Test type: array or object 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "array",
      "object",
    ],
  },
  "ts": "any[] | object",
}
`;

exports[`draft6 type.json Test type: array, object or null 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "array",
      "object",
      "null",
    ],
  },
  "ts": "any[] | object | null",
}
`;

exports[`draft6 uniqueItems.json Test uniqueItems validation 1`] = `
Object {
  "schema": Object {
    "uniqueItems": true,
  },
  "ts": "any",
}
`;

exports[`draft7 additionalItems.json Test additionalItems are allowed by default 1`] = `
Object {
  "schema": Object {
    "items": Array [
      Object {
        "type": "integer",
      },
    ],
  },
  "ts": "(number)[]",
}
`;

exports[`draft7 additionalItems.json Test additionalItems as false without items 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
  },
  "ts": "any",
}
`;

exports[`draft7 additionalItems.json Test additionalItems as schema 1`] = `
Object {
  "schema": Object {
    "additionalItems": Object {
      "type": "integer",
    },
    "items": Array [
      Object {},
    ],
  },
  "ts": "(any | number)[]",
}
`;

exports[`draft7 additionalItems.json Test array of items with no additionalItems 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
    "items": Array [
      Object {},
      Object {},
      Object {},
    ],
  },
  "ts": "[any, any, any]",
}
`;

exports[`draft7 additionalItems.json Test items is schema, no additionalItems 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
    "items": Object {},
  },
  "ts": "any[]",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties allows a schema which should validate 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "boolean",
    },
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: boolean;
}",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties are allowed by default 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
    [key: string]: any;
}",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties being false does not allow other properties 1`] = `
Object {
  "schema": Object {
    "additionalProperties": false,
    "patternProperties": Object {
      "^v": Object {},
    },
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    bar?: any;
}",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties can exist by itself 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "boolean",
    },
  },
  "ts": "any",
}
`;

exports[`draft7 additionalProperties.json Test additionalProperties should not look in applicators 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "boolean",
    },
    "allOf": Array [
      Object {
        "properties": Object {
          "foo": Object {},
        },
      },
    ],
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft7 additionalProperties.json Test non-ASCII pattern with additionalProperties 1`] = `
Object {
  "schema": Object {
    "additionalProperties": false,
    "patternProperties": Object {
      "^รก": Object {},
    },
  },
  "ts": "any",
}
`;

exports[`draft7 allOf.json Test allOf 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
        },
        "required": Array [
          "bar",
        ],
      },
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
} & {
    foo: string;
    [key: string]: any;
}",
}
`;

exports[`draft7 allOf.json Test allOf simple types 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "maximum": 30,
      },
      Object {
        "minimum": 20,
      },
    ],
  },
  "ts": "number & number",
}
`;

exports[`draft7 allOf.json Test allOf with base schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
      Object {
        "properties": Object {
          "baz": Object {
            "type": "null",
          },
        },
        "required": Array [
          "baz",
        ],
      },
    ],
    "properties": Object {
      "bar": Object {
        "type": "integer",
      },
    },
    "required": Array [
      "bar",
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
}",
}
`;

exports[`draft7 allOf.json Test allOf with boolean schemas, all false 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      false,
      false,
    ],
  },
  "ts": "void & void",
}
`;

exports[`draft7 allOf.json Test allOf with boolean schemas, all true 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      true,
      true,
    ],
  },
  "ts": "any & any",
}
`;

exports[`draft7 allOf.json Test allOf with boolean schemas, some false 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      true,
      false,
    ],
  },
  "ts": "any & void",
}
`;

exports[`draft7 allOf.json Test allOf with one empty schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {},
    ],
  },
  "ts": "any",
}
`;

exports[`draft7 allOf.json Test allOf with the first empty schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {},
      Object {
        "type": "number",
      },
    ],
  },
  "ts": "any & number",
}
`;

exports[`draft7 allOf.json Test allOf with the last empty schema 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "type": "number",
      },
      Object {},
    ],
  },
  "ts": "number & any",
}
`;

exports[`draft7 allOf.json Test allOf with two empty schemas 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {},
      Object {},
    ],
  },
  "ts": "any & any",
}
`;

exports[`draft7 anyOf.json Test anyOf 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "type": "integer",
      },
      Object {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number",
}
`;

exports[`draft7 anyOf.json Test anyOf complex types 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
        },
        "required": Array [
          "bar",
        ],
      },
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
} | {
    foo: string;
    [key: string]: any;
}",
}
`;

exports[`draft7 anyOf.json Test anyOf with base schema 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "maxLength": 2,
      },
      Object {
        "minLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string",
}
`;

exports[`draft7 anyOf.json Test anyOf with boolean schemas, all false 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      false,
      false,
    ],
  },
  "ts": "void | void",
}
`;

exports[`draft7 anyOf.json Test anyOf with boolean schemas, all true 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      true,
      true,
    ],
  },
  "ts": "any | any",
}
`;

exports[`draft7 anyOf.json Test anyOf with boolean schemas, some true 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      true,
      false,
    ],
  },
  "ts": "any | void",
}
`;

exports[`draft7 anyOf.json Test anyOf with one empty schema 1`] = `
Object {
  "schema": Object {
    "anyOf": Array [
      Object {
        "type": "number",
      },
      Object {},
    ],
  },
  "ts": "number | any",
}
`;

exports[`draft7 boolean_schema.json Test boolean schema 'false' 1`] = `
Object {
  "schema": false,
  "ts": "void",
}
`;

exports[`draft7 boolean_schema.json Test boolean schema 'true' 1`] = `
Object {
  "schema": true,
  "ts": "any",
}
`;

exports[`draft7 const.json Test const validation 1`] = `
Object {
  "schema": Object {
    "const": 2,
  },
  "ts": "2",
}
`;

exports[`draft7 const.json Test const with array 1`] = `
Object {
  "schema": Object {
    "const": Array [
      Object {
        "foo": "bar",
      },
    ],
  },
  "ts": "any",
}
`;

exports[`draft7 const.json Test const with null 1`] = `
Object {
  "schema": Object {
    "const": null,
  },
  "ts": "any",
}
`;

exports[`draft7 const.json Test const with object 1`] = `
Object {
  "schema": Object {
    "const": Object {
      "baz": "bax",
      "foo": "bar",
    },
  },
  "ts": "any",
}
`;

exports[`draft7 contains.json Test contains keyword validation 1`] = `
Object {
  "schema": Object {
    "contains": Object {
      "minimum": 5,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 contains.json Test contains keyword with boolean schema false 1`] = `
Object {
  "schema": Object {
    "contains": false,
  },
  "ts": "any",
}
`;

exports[`draft7 contains.json Test contains keyword with boolean schema true 1`] = `
Object {
  "schema": Object {
    "contains": true,
  },
  "ts": "any",
}
`;

exports[`draft7 contains.json Test contains keyword with const keyword 1`] = `
Object {
  "schema": Object {
    "contains": Object {
      "const": 5,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 default.json Test invalid string value for default 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "default": "bad",
        "minLength": 4,
        "type": "string",
      },
    },
  },
  "ts": "{
    bar?: string;
    [key: string]: any;
}",
}
`;

exports[`draft7 default.json Test invalid type for default 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {
        "default": Array [],
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    [key: string]: any;
}",
}
`;

exports[`draft7 definitions.json Test invalid definition 1`] = `
Object {
  "schema": Object {
    "$ref": "http://json-schema.org/draft-07/schema#",
  },
  "ts": "schema#

export interface schema# {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly?: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if?: #;
    then?: #;
    else?: #;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface # {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly?: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if?: #;
    then?: #;
    else?: #;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type schemaArray = #[];

export type stringArray = string[];

export type simpleTypes = \\"array\\" | \\"boolean\\" | \\"integer\\" | \\"null\\" | \\"number\\" | \\"object\\" | \\"string\\";",
}
`;

exports[`draft7 definitions.json Test valid definition 1`] = `
Object {
  "schema": Object {
    "$ref": "http://json-schema.org/draft-07/schema#",
  },
  "ts": "schema#

export interface schema# {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly?: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if?: #;
    then?: #;
    else?: #;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface # {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly?: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if?: #;
    then?: #;
    else?: #;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type schemaArray = #[];

export type stringArray = string[];

export type simpleTypes = \\"array\\" | \\"boolean\\" | \\"integer\\" | \\"null\\" | \\"number\\" | \\"object\\" | \\"string\\";",
}
`;

exports[`draft7 dependencies.json Test dependencies 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": Array [
        "foo",
      ],
    },
  },
  "ts": "any",
}
`;

exports[`draft7 dependencies.json Test dependencies with boolean subschemas 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 dependencies.json Test dependencies with empty array 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": Array [],
    },
  },
  "ts": "any",
}
`;

exports[`draft7 dependencies.json Test dependencies with escaped characters 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "foo	bar": Object {
        "minProperties": 4,
      },
      "foo
bar": Array [
        "foo
bar",
      ],
      "foo\\"bar": Array [
        "foo'bar",
      ],
      "foo'bar": Object {
        "required": Array [
          "foo\\"bar",
        ],
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft7 dependencies.json Test empty array of dependencies 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "foo": Array [],
    },
  },
  "ts": "any",
}
`;

exports[`draft7 dependencies.json Test multiple dependencies 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "quux": Array [
        "foo",
        "bar",
      ],
    },
  },
  "ts": "any",
}
`;

exports[`draft7 dependencies.json Test multiple dependencies subschema 1`] = `
Object {
  "schema": Object {
    "dependencies": Object {
      "bar": Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
          "foo": Object {
            "type": "integer",
          },
        },
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft7 enum.json Test enum with escaped characters 1`] = `
Object {
  "schema": Object {
    "enum": Array [
      "foo
bar",
      "foo
bar",
    ],
  },
  "ts": "\\"foo\\\\nbar\\" | \\"foo\\\\rbar\\"",
}
`;

exports[`draft7 enum.json Test enums in properties 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "enum": Array [
          "bar",
        ],
      },
      "foo": Object {
        "enum": Array [
          "foo",
        ],
      },
    },
    "required": Array [
      "bar",
    ],
    "type": "object",
  },
  "ts": "{
    foo?: \\"foo\\";
    bar: \\"bar\\";
    [key: string]: any;
}",
}
`;

exports[`draft7 enum.json Test heterogeneous enum validation 1`] = `
Object {
  "schema": Object {
    "enum": Array [
      6,
      "foo",
      Array [],
      true,
      Object {
        "foo": 12,
      },
    ],
  },
  "ts": "6 | \\"foo\\" | any | true | any",
}
`;

exports[`draft7 enum.json Test simple enum validation 1`] = `
Object {
  "schema": Object {
    "enum": Array [
      1,
      2,
      3,
    ],
  },
  "ts": "1 | 2 | 3",
}
`;

exports[`draft7 exclusiveMaximum.json Test exclusiveMaximum validation 1`] = `
Object {
  "schema": Object {
    "exclusiveMaximum": 3,
  },
  "ts": "number",
}
`;

exports[`draft7 exclusiveMinimum.json Test exclusiveMinimum validation 1`] = `
Object {
  "schema": Object {
    "exclusiveMinimum": 1.1,
  },
  "ts": "number",
}
`;

exports[`draft7 if-then-else.json Test if and else without then 1`] = `
Object {
  "schema": Object {
    "else": Object {
      "multipleOf": 2,
    },
    "if": Object {
      "exclusiveMaximum": 0,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 if-then-else.json Test if and then without else 1`] = `
Object {
  "schema": Object {
    "if": Object {
      "exclusiveMaximum": 0,
    },
    "then": Object {
      "minimum": -10,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 if-then-else.json Test ignore else without if 1`] = `
Object {
  "schema": Object {
    "else": Object {
      "const": 0,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 if-then-else.json Test ignore if without then or else 1`] = `
Object {
  "schema": Object {
    "if": Object {
      "const": 0,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 if-then-else.json Test ignore then without if 1`] = `
Object {
  "schema": Object {
    "then": Object {
      "const": 0,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 if-then-else.json Test non-interference across combined schemas 1`] = `
Object {
  "schema": Object {
    "allOf": Array [
      Object {
        "if": Object {
          "exclusiveMaximum": 0,
        },
      },
      Object {
        "then": Object {
          "minimum": -10,
        },
      },
      Object {
        "else": Object {
          "multipleOf": 2,
        },
      },
    ],
  },
  "ts": "any & any & any",
}
`;

exports[`draft7 if-then-else.json Test validate against correct branch, then vs else 1`] = `
Object {
  "schema": Object {
    "else": Object {
      "multipleOf": 2,
    },
    "if": Object {
      "exclusiveMaximum": 0,
    },
    "then": Object {
      "minimum": -10,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 items.json Test a schema given for items 1`] = `
Object {
  "schema": Object {
    "items": Object {
      "type": "integer",
    },
  },
  "ts": "number[]",
}
`;

exports[`draft7 items.json Test an array of schemas for items 1`] = `
Object {
  "schema": Object {
    "items": Array [
      Object {
        "type": "integer",
      },
      Object {
        "type": "string",
      },
    ],
  },
  "ts": "(number | string)[]",
}
`;

exports[`draft7 items.json Test items and subitems 1`] = `
Object {
  "schema": Object {
    "additionalItems": false,
    "definitions": Object {
      "item": Object {
        "additionalItems": false,
        "items": Array [
          Object {
            "$ref": "#/definitions/sub-item",
          },
          Object {
            "$ref": "#/definitions/sub-item",
          },
        ],
        "type": "array",
      },
      "sub-item": Object {
        "required": Array [
          "foo",
        ],
        "type": "object",
      },
    },
    "items": Array [
      Object {
        "$ref": "#/definitions/item",
      },
      Object {
        "$ref": "#/definitions/item",
      },
      Object {
        "$ref": "#/definitions/item",
      },
    ],
    "type": "array",
  },
  "ts": "[item, item, item]

export type item = [sub-item, sub-item];

export type sub-item = any;",
}
`;

exports[`draft7 items.json Test items with boolean schema (false) 1`] = `
Object {
  "schema": Object {
    "items": false,
  },
  "ts": "any",
}
`;

exports[`draft7 items.json Test items with boolean schema (true) 1`] = `
Object {
  "schema": Object {
    "items": true,
  },
  "ts": "any[]",
}
`;

exports[`draft7 items.json Test items with boolean schemas 1`] = `
Object {
  "schema": Object {
    "items": Array [
      true,
      false,
    ],
  },
  "ts": "(any | void)[]",
}
`;

exports[`draft7 items.json Test nested items 1`] = `
Object {
  "schema": Object {
    "items": Object {
      "items": Object {
        "items": Object {
          "items": Object {
            "type": "number",
          },
          "type": "array",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "array",
  },
  "ts": "number[][][][]",
}
`;

exports[`draft7 maxItems.json Test maxItems validation 1`] = `
Object {
  "schema": Object {
    "maxItems": 2,
  },
  "ts": "any[]",
}
`;

exports[`draft7 maxLength.json Test maxLength validation 1`] = `
Object {
  "schema": Object {
    "maxLength": 2,
  },
  "ts": "string",
}
`;

exports[`draft7 maxProperties.json Test maxProperties validation 1`] = `
Object {
  "schema": Object {
    "maxProperties": 2,
  },
  "ts": "any",
}
`;

exports[`draft7 maximum.json Test maximum validation 1`] = `
Object {
  "schema": Object {
    "maximum": 3,
  },
  "ts": "number",
}
`;

exports[`draft7 minItems.json Test minItems validation 1`] = `
Object {
  "schema": Object {
    "minItems": 1,
  },
  "ts": "any[]",
}
`;

exports[`draft7 minLength.json Test minLength validation 1`] = `
Object {
  "schema": Object {
    "minLength": 2,
  },
  "ts": "string",
}
`;

exports[`draft7 minProperties.json Test minProperties validation 1`] = `
Object {
  "schema": Object {
    "minProperties": 1,
  },
  "ts": "any",
}
`;

exports[`draft7 minimum.json Test minimum validation 1`] = `
Object {
  "schema": Object {
    "minimum": 1.1,
  },
  "ts": "number",
}
`;

exports[`draft7 minimum.json Test minimum validation with signed integer 1`] = `
Object {
  "schema": Object {
    "minimum": -2,
  },
  "ts": "number",
}
`;

exports[`draft7 multipleOf.json Test by int 1`] = `
Object {
  "schema": Object {
    "multipleOf": 2,
  },
  "ts": "any",
}
`;

exports[`draft7 multipleOf.json Test by number 1`] = `
Object {
  "schema": Object {
    "multipleOf": 1.5,
  },
  "ts": "any",
}
`;

exports[`draft7 multipleOf.json Test by small number 1`] = `
Object {
  "schema": Object {
    "multipleOf": 0.0001,
  },
  "ts": "any",
}
`;

exports[`draft7 not.json Test forbidden property 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {
        "not": Object {},
      },
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft7 not.json Test not 1`] = `
Object {
  "schema": Object {
    "not": Object {
      "type": "integer",
    },
  },
  "ts": "any",
}
`;

exports[`draft7 not.json Test not more complex schema 1`] = `
Object {
  "schema": Object {
    "not": Object {
      "properties": Object {
        "foo": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
  },
  "ts": "any",
}
`;

exports[`draft7 not.json Test not multiple types 1`] = `
Object {
  "schema": Object {
    "not": Object {
      "type": Array [
        "integer",
        "boolean",
      ],
    },
  },
  "ts": "any",
}
`;

exports[`draft7 not.json Test not with boolean schema false 1`] = `
Object {
  "schema": Object {
    "not": false,
  },
  "ts": "any",
}
`;

exports[`draft7 not.json Test not with boolean schema true 1`] = `
Object {
  "schema": Object {
    "not": true,
  },
  "ts": "any",
}
`;

exports[`draft7 oneOf.json Test oneOf 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "type": "integer",
      },
      Object {
        "minimum": 2,
      },
    ],
  },
  "ts": "number | number",
}
`;

exports[`draft7 oneOf.json Test oneOf complex types 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "properties": Object {
          "bar": Object {
            "type": "integer",
          },
        },
        "required": Array [
          "bar",
        ],
      },
      Object {
        "properties": Object {
          "foo": Object {
            "type": "string",
          },
        },
        "required": Array [
          "foo",
        ],
      },
    ],
  },
  "ts": "{
    bar: number;
    [key: string]: any;
} | {
    foo: string;
    [key: string]: any;
}",
}
`;

exports[`draft7 oneOf.json Test oneOf with base schema 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "minLength": 2,
      },
      Object {
        "maxLength": 4,
      },
    ],
    "type": "string",
  },
  "ts": "string",
}
`;

exports[`draft7 oneOf.json Test oneOf with boolean schemas, all false 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      false,
      false,
      false,
    ],
  },
  "ts": "void | void | void",
}
`;

exports[`draft7 oneOf.json Test oneOf with boolean schemas, all true 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      true,
      true,
      true,
    ],
  },
  "ts": "any | any | any",
}
`;

exports[`draft7 oneOf.json Test oneOf with boolean schemas, more than one true 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      true,
      true,
      false,
    ],
  },
  "ts": "any | any | void",
}
`;

exports[`draft7 oneOf.json Test oneOf with boolean schemas, one true 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      true,
      false,
      false,
    ],
  },
  "ts": "any | void | void",
}
`;

exports[`draft7 oneOf.json Test oneOf with empty schema 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "type": "number",
      },
      Object {},
    ],
  },
  "ts": "number | any",
}
`;

exports[`draft7 oneOf.json Test oneOf with required 1`] = `
Object {
  "schema": Object {
    "oneOf": Array [
      Object {
        "required": Array [
          "foo",
          "bar",
        ],
      },
      Object {
        "required": Array [
          "foo",
          "baz",
        ],
      },
    ],
    "type": "object",
  },
  "ts": "any | any",
}
`;

exports[`draft7 pattern.json Test pattern is not anchored 1`] = `
Object {
  "schema": Object {
    "pattern": "a+",
  },
  "ts": "string",
}
`;

exports[`draft7 pattern.json Test pattern validation 1`] = `
Object {
  "schema": Object {
    "pattern": "^a*$",
  },
  "ts": "string",
}
`;

exports[`draft7 patternProperties.json Test multiple simultaneous patternProperties are validated 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "a*": Object {
        "type": "integer",
      },
      "aaa*": Object {
        "maximum": 20,
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft7 patternProperties.json Test patternProperties validates properties matching a regex 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "f.*o": Object {
        "type": "integer",
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft7 patternProperties.json Test patternProperties with boolean schemas 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "b.*": false,
      "f.*": true,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 patternProperties.json Test regexes are not anchored by default and are case sensitive 1`] = `
Object {
  "schema": Object {
    "patternProperties": Object {
      "X_": Object {
        "type": "string",
      },
      "[0-9]{2,}": Object {
        "type": "boolean",
      },
    },
  },
  "ts": "any",
}
`;

exports[`draft7 properties.json Test object properties validation 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "type": "string",
      },
      "foo": Object {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: string;
    [key: string]: any;
}",
}
`;

exports[`draft7 properties.json Test properties with boolean schema 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": false,
      "foo": true,
    },
  },
  "ts": "{
    foo?: any;
    bar?: void;
    [key: string]: any;
}",
}
`;

exports[`draft7 properties.json Test properties with escaped characters 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo	bar": Object {
        "type": "number",
      },
      "foo
bar": Object {
        "type": "number",
      },
      "foobar": Object {
        "type": "number",
      },
      "foo
bar": Object {
        "type": "number",
      },
      "foo\\"bar": Object {
        "type": "number",
      },
      "foo\\\\bar": Object {
        "type": "number",
      },
    },
  },
  "ts": "{
    foo
bar?: number;
    foo\\"bar?: number;
    foo\\\\bar?: number;
    foo
bar?: number;
    foo	bar?: number;
    foobar?: number;
    [key: string]: any;
}",
}
`;

exports[`draft7 properties.json Test properties, patternProperties, additionalProperties interaction 1`] = `
Object {
  "schema": Object {
    "additionalProperties": Object {
      "type": "integer",
    },
    "patternProperties": Object {
      "f.o": Object {
        "minItems": 2,
      },
    },
    "properties": Object {
      "bar": Object {
        "type": "array",
      },
      "foo": Object {
        "maxItems": 3,
        "type": "array",
      },
    },
  },
  "ts": "{
    foo?: any[];
    bar?: any;
    [key: string]: number;
}",
}
`;

exports[`draft7 propertyNames.json Test propertyNames validation 1`] = `
Object {
  "schema": Object {
    "propertyNames": Object {
      "maxLength": 3,
    },
  },
  "ts": "any",
}
`;

exports[`draft7 propertyNames.json Test propertyNames with boolean schema false 1`] = `
Object {
  "schema": Object {
    "propertyNames": false,
  },
  "ts": "any",
}
`;

exports[`draft7 propertyNames.json Test propertyNames with boolean schema true 1`] = `
Object {
  "schema": Object {
    "propertyNames": true,
  },
  "ts": "any",
}
`;

exports[`draft7 ref.json Test $ref to boolean schema false 1`] = `
Object {
  "schema": Object {
    "$ref": "#/definitions/bool",
    "definitions": Object {
      "bool": false,
    },
  },
  "ts": "bool

export type bool = bool;",
}
`;

exports[`draft7 ref.json Test $ref to boolean schema true 1`] = `
Object {
  "schema": Object {
    "$ref": "#/definitions/bool",
    "definitions": Object {
      "bool": true,
    },
  },
  "ts": "bool

export type bool = any;",
}
`;

exports[`draft7 ref.json Test Recursive references between schemas 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/tree",
    "definitions": Object {
      "node": Object {
        "$id": "http://localhost:1234/node",
        "description": "node",
        "properties": Object {
          "subtree": Object {
            "$ref": "tree",
          },
          "value": Object {
            "type": "number",
          },
        },
        "required": Array [
          "value",
        ],
        "type": "object",
      },
    },
    "description": "tree of nodes",
    "properties": Object {
      "meta": Object {
        "type": "string",
      },
      "nodes": Object {
        "items": Object {
          "$ref": "node",
        },
        "type": "array",
      },
    },
    "required": Array [
      "meta",
      "nodes",
    ],
    "type": "object",
  },
  "ts": "{
    meta: string;
    nodes: node#[];
    [key: string]: any;
}

export interface node# {
    value: number;
    subtree?: tree#;
    [key: string]: any;
}

export interface tree# {
    meta: string;
    nodes: node#[];
    [key: string]: any;
}",
}
`;

exports[`draft7 ref.json Test escaped pointer ref 1`] = `
Object {
  "schema": Object {
    "percent%field": Object {
      "type": "integer",
    },
    "properties": Object {
      "percent": Object {
        "$ref": "#/percent%25field",
      },
      "slash": Object {
        "$ref": "#/slash~1field",
      },
      "tilda": Object {
        "$ref": "#/tilda~0field",
      },
    },
    "slash/field": Object {
      "type": "integer",
    },
    "tilda~field": Object {
      "type": "integer",
    },
  },
  "ts": "{
    tilda?: tilda~0field;
    slash?: slash~1field;
    percent?: percent%25field;
    [key: string]: any;
}

export type tilda~0field = number;

export type slash~1field = number;

export type percent%25field = number;",
}
`;

exports[`draft7 ref.json Test nested refs 1`] = `
Object {
  "schema": Object {
    "$ref": "#/definitions/c",
    "definitions": Object {
      "a": Object {
        "type": "integer",
      },
      "b": Object {
        "$ref": "#/definitions/a",
      },
      "c": Object {
        "$ref": "#/definitions/b",
      },
    },
  },
  "ts": "c

export type c = b;

export type b = a;

export type a = number;",
}
`;

exports[`draft7 ref.json Test property named $ref that is not a reference 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "$ref": Object {
        "type": "string",
      },
    },
  },
  "ts": "{
    $ref?: string;
    [key: string]: any;
}",
}
`;

exports[`draft7 ref.json Test ref overrides any sibling keywords 1`] = `
Object {
  "schema": Object {
    "definitions": Object {
      "reffed": Object {
        "type": "array",
      },
    },
    "properties": Object {
      "foo": Object {
        "$ref": "#/definitions/reffed",
        "maxItems": 2,
      },
    },
  },
  "ts": "{
    foo?: reffed;
    [key: string]: any;
}

export type reffed = any;",
}
`;

exports[`draft7 ref.json Test refs with quote 1`] = `
Object {
  "schema": Object {
    "definitions": Object {
      "foo\\"bar": Object {
        "type": "number",
      },
    },
    "properties": Object {
      "foo\\"bar": Object {
        "$ref": "#/definitions/foo%22bar",
      },
    },
  },
  "ts": "{
    foo\\"bar?: foo%22bar;
    [key: string]: any;
}

export type foo%22bar = number;",
}
`;

exports[`draft7 ref.json Test relative pointer ref to array 1`] = `
Object {
  "schema": Object {
    "items": Array [
      Object {
        "type": "integer",
      },
      Object {
        "$ref": "#/items/0",
      },
    ],
  },
  "ts": "(number | 0)[]

export type 0 = number;",
}
`;

exports[`draft7 ref.json Test relative pointer ref to object 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {
        "$ref": "#/properties/foo",
      },
      "foo": Object {
        "type": "integer",
      },
    },
  },
  "ts": "{
    foo?: number;
    bar?: foo;
    [key: string]: any;
}

export type foo = number;",
}
`;

exports[`draft7 ref.json Test remote ref, containing refs itself 1`] = `
Object {
  "schema": Object {
    "$ref": "http://json-schema.org/draft-07/schema#",
  },
  "ts": "schema#

export interface schema# {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly?: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if?: #;
    then?: #;
    else?: #;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type nonNegativeInteger = number;

export type nonNegativeIntegerDefault0 = nonNegativeInteger & any;

export interface # {
    $id?: string;
    $schema?: string;
    $ref?: string;
    $comment?: string;
    title?: string;
    description?: string;
    default?: any;
    readOnly?: boolean;
    examples?: any[];
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: nonNegativeInteger;
    minLength?: nonNegativeIntegerDefault0;
    pattern?: string;
    additionalItems?: #;
    items?: # | schemaArray;
    maxItems?: nonNegativeInteger;
    minItems?: nonNegativeIntegerDefault0;
    uniqueItems?: boolean;
    contains?: #;
    maxProperties?: nonNegativeInteger;
    minProperties?: nonNegativeIntegerDefault0;
    required?: stringArray;
    additionalProperties?: #;
    definitions?: any;
    properties?: any;
    patternProperties?: any;
    dependencies?: any;
    propertyNames?: #;
    const?: any;
    enum?: any[];
    type?: simpleTypes | simpleTypes[];
    format?: string;
    contentMediaType?: string;
    contentEncoding?: string;
    if?: #;
    then?: #;
    else?: #;
    allOf?: schemaArray;
    anyOf?: schemaArray;
    oneOf?: schemaArray;
    not?: #;
    [key: string]: any;
}

export type schemaArray = #[];

export type stringArray = string[];

export type simpleTypes = \\"array\\" | \\"boolean\\" | \\"integer\\" | \\"null\\" | \\"number\\" | \\"object\\" | \\"string\\";",
}
`;

exports[`draft7 ref.json Test root pointer ref 1`] = `
Object {
  "schema": Object {
    "additionalProperties": false,
    "properties": Object {
      "foo": Object {
        "$ref": "#",
      },
    },
  },
  "ts": "{
    foo?: #;
}

export interface # {
    foo?: #;
}",
}
`;

exports[`draft7 refRemote.json Test base URI change - change folder 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/scope_change_defs1.json",
    "definitions": Object {
      "baz": Object {
        "$id": "folder/",
        "items": Object {
          "$ref": "folderInteger.json",
        },
        "type": "array",
      },
    },
    "properties": Object {
      "list": Object {
        "$ref": "#/definitions/baz",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: baz;
    [key: string]: any;
}

export type baz = folderInteger.json#[];

export type folderInteger.json# = number;",
}
`;

exports[`draft7 refRemote.json Test base URI change - change folder in subschema 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/scope_change_defs2.json",
    "definitions": Object {
      "baz": Object {
        "$id": "folder/",
        "definitions": Object {
          "bar": Object {
            "items": Object {
              "$ref": "folderInteger.json",
            },
            "type": "array",
          },
        },
      },
    },
    "properties": Object {
      "list": Object {
        "$ref": "#/definitions/baz/definitions/bar",
      },
    },
    "type": "object",
  },
  "ts": "{
    list?: bar;
    [key: string]: any;
}

export type bar = folderInteger.json#[];

export type folderInteger.json# = number;",
}
`;

exports[`draft7 refRemote.json Test base URI change 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/",
    "items": Object {
      "$id": "folder/",
      "items": Object {
        "$ref": "folderInteger.json",
      },
    },
  },
  "ts": "folderInteger.json#[][]

export type folderInteger.json# = number;",
}
`;

exports[`draft7 refRemote.json Test fragment within remote ref 1`] = `
Object {
  "schema": Object {
    "$ref": "http://localhost:1234/subSchemas.json#/integer",
  },
  "ts": "integer

export type integer = number;",
}
`;

exports[`draft7 refRemote.json Test ref within remote ref 1`] = `
Object {
  "schema": Object {
    "$ref": "http://localhost:1234/subSchemas.json#/refToInteger",
  },
  "ts": "refToInteger

export type refToInteger = integer;

export type integer = number;",
}
`;

exports[`draft7 refRemote.json Test remote ref 1`] = `
Object {
  "schema": Object {
    "$ref": "http://localhost:1234/integer.json",
  },
  "ts": "integer.json#

export type integer.json# = number;",
}
`;

exports[`draft7 refRemote.json Test root ref in remote ref 1`] = `
Object {
  "schema": Object {
    "$id": "http://localhost:1234/object",
    "properties": Object {
      "name": Object {
        "$ref": "name.json#/definitions/orNull",
      },
    },
    "type": "object",
  },
  "ts": "{
    name?: orNull;
    [key: string]: any;
}

export type orNull = any | #;

export type # = string;",
}
`;

exports[`draft7 required.json Test required default validation 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {},
    },
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft7 required.json Test required validation 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "bar": Object {},
      "foo": Object {},
    },
    "required": Array [
      "foo",
    ],
  },
  "ts": "{
    foo: any;
    bar?: any;
    [key: string]: any;
}",
}
`;

exports[`draft7 required.json Test required with empty array 1`] = `
Object {
  "schema": Object {
    "properties": Object {
      "foo": Object {},
    },
    "required": Array [],
  },
  "ts": "{
    foo?: any;
    [key: string]: any;
}",
}
`;

exports[`draft7 required.json Test required with escaped characters 1`] = `
Object {
  "schema": Object {
    "required": Array [
      "foo
bar",
      "foo\\"bar",
      "foo\\\\bar",
      "foo
bar",
      "foo	bar",
      "foobar",
    ],
  },
  "ts": "any",
}
`;

exports[`draft7 type.json Test array type matches arrays 1`] = `
Object {
  "schema": Object {
    "type": "array",
  },
  "ts": "any",
}
`;

exports[`draft7 type.json Test boolean type matches booleans 1`] = `
Object {
  "schema": Object {
    "type": "boolean",
  },
  "ts": "boolean",
}
`;

exports[`draft7 type.json Test integer type matches integers 1`] = `
Object {
  "schema": Object {
    "type": "integer",
  },
  "ts": "number",
}
`;

exports[`draft7 type.json Test multiple types can be specified in an array 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "integer",
      "string",
    ],
  },
  "ts": "number | string",
}
`;

exports[`draft7 type.json Test null type matches only the null object 1`] = `
Object {
  "schema": Object {
    "type": "null",
  },
  "ts": "any",
}
`;

exports[`draft7 type.json Test number type matches numbers 1`] = `
Object {
  "schema": Object {
    "type": "number",
  },
  "ts": "number",
}
`;

exports[`draft7 type.json Test object type matches objects 1`] = `
Object {
  "schema": Object {
    "type": "object",
  },
  "ts": "any",
}
`;

exports[`draft7 type.json Test string type matches strings 1`] = `
Object {
  "schema": Object {
    "type": "string",
  },
  "ts": "string",
}
`;

exports[`draft7 type.json Test type as array with one item 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "string",
    ],
  },
  "ts": "string",
}
`;

exports[`draft7 type.json Test type: array or object 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "array",
      "object",
    ],
  },
  "ts": "any[] | object",
}
`;

exports[`draft7 type.json Test type: array, object or null 1`] = `
Object {
  "schema": Object {
    "type": Array [
      "array",
      "object",
      "null",
    ],
  },
  "ts": "any[] | object | null",
}
`;

exports[`draft7 uniqueItems.json Test uniqueItems validation 1`] = `
Object {
  "schema": Object {
    "uniqueItems": true,
  },
  "ts": "any",
}
`;
