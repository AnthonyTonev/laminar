// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Json Schema Ts Test api-with-examples.yaml 1`] = `
"import { ResolverResponse, RouteContext } from \\"@ovotech/laminar\\";

import { OapiContext, OapiPaths, OapiSecurityResolver, OapiSecurityResolvers } from \\"@ovotech/laminar-oapi\\";

export interface Paths<TContext = {}> extends OapiPaths<TContext> {
    \\"/\\": {
        get: (context: GetContext & TContext) => ResolverResponse;
    };
    \\"/v2\\": {
        get: (context: V2GetContext & TContext) => ResolverResponse;
    };
}

export interface GetContext extends OapiContext, RouteContext {
}

export interface V2GetContext extends OapiContext, RouteContext {
}"
`;

exports[`Json Schema Ts Test balance-service.yaml 1`] = `
"import { LaminarResponse, ResolverResponse, RouteContext } from \\"@ovotech/laminar\\";

import { OapiContext, OapiPaths, OapiSecurityResolver, OapiSecurityResolvers } from \\"@ovotech/laminar-oapi\\";

export interface Paths<TContext = {}> extends OapiPaths<TContext> {
    \\"/internal/status\\": {
        /**
         * Returns 200 if the application is up. It does not do deep check. Always gives back 200.
         */
        get: (context: InternalStatusGetContext & TContext) => ResolverResponse;
    };
    \\"/internal/swagger.yaml\\": {
        get: (context: InternalSwaggeryamlGetContext & TContext) => ResolverResponse;
    };
    \\"/api/v2/accounts/{accountId}/balance\\": {
        /**
         * Returns the balance
         */
        get: (context: ApiV2AccountsAccountIdBalanceGetContext & TContext) => ApiV2AccountsAccountIdBalanceGetResponse;
    };
    \\"/api/v2/accounts/{accountId}/transactions\\": {
        /**
         * Returns the transaction history
         */
        get: (context: ApiV2AccountsAccountIdTransactionsGetContext & TContext) => ApiV2AccountsAccountIdTransactionsGetResponse;
    };
    \\"/api/v2/accounts/{accountId}/adjust-balance\\": {
        /**
         * Returns with the adjusted balance
         */
        post: (context: ApiV2AccountsAccountIdAdjustbalancePostContext & TContext) => ApiV2AccountsAccountIdAdjustbalancePostResponse;
    };
    \\"/api/v3/accounts/{accountId}/balance\\": {
        /**
         * Returns the balance
         */
        get: (context: ApiV3AccountsAccountIdBalanceGetContext & TContext) => ApiV3AccountsAccountIdBalanceGetResponse;
    };
    \\"/api/v3/accounts/{accountId}/transactions\\": {
        /**
         * Returns the transaction history
         */
        get: (context: ApiV3AccountsAccountIdTransactionsGetContext & TContext) => ApiV3AccountsAccountIdTransactionsGetResponse;
    };
    \\"/api/v3/accounts/{accountId}/adjust-balance\\": {
        /**
         * Returns with the adjusted balance
         */
        post: (context: ApiV3AccountsAccountIdAdjustbalancePostContext & TContext) => ApiV3AccountsAccountIdAdjustbalancePostResponse;
    };
}

export interface InternalStatusGetContext extends OapiContext, RouteContext {
}

export interface InternalSwaggeryamlGetContext extends OapiContext, RouteContext {
}

export interface BalanceSummaryHttpResponse {
    balance?: number;
    /**
     * Last transaction date-time which updated the balance
     */
    effectiveAt?: string;
    /**
     * When balance service updated the balance
     */
    updatedAt?: string;
    [key: string]: any;
}

export interface HttpErrorResponse {
    /**
     * PLANNED. Currently not sent
     */
    errorCode?: string;
    message?: string;
    [key: string]: any;
}

export type ApiV2AccountsAccountIdBalanceGetResponse = (BalanceSummaryHttpResponse | LaminarResponse<BalanceSummaryHttpResponse>) | LaminarResponse<HttpErrorResponse> | LaminarResponse<HttpErrorResponse>;

export interface ApiV2AccountsAccountIdBalanceGetContext extends OapiContext, RouteContext {
    path: {
        accountId: string;
    };
}

export interface TransactionHistoryHttpResponseV2 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | ChargeTransactionEntity)[];
    [key: string]: any;
}

export interface TransactionHistorySummary {
    /**
     * Number of search hits
     */
    totalSize?: number;
    [key: string]: any;
}

export interface GenericTransactionEntity {
    transactionType?: \\"TopUp\\" | \\"BalanceAdjustment\\";
    amount?: number;
    transactionDateTime?: string;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit', 'AppPayment'
     */
    cause?: string;
    [key: string]: any;
}

export interface ChargeTransactionEntity {
    transactionType?: \\"ElectricityUsageCharge\\" | \\"ElectricityStandingCharge\\";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: \\"Electricity\\" | \\"Gas\\";
    [key: string]: any;
}

export type ApiV2AccountsAccountIdTransactionsGetResponse = (TransactionHistoryHttpResponseV2 | LaminarResponse<TransactionHistoryHttpResponseV2>) | LaminarResponse<HttpErrorResponse> | LaminarResponse<HttpErrorResponse>;

export interface ApiV2AccountsAccountIdTransactionsGetContext extends OapiContext, RouteContext {
    path: {
        accountId: string;
    };
    headers: {
        scenario?: string;
    };
    cookies: {
        session?: string;
    };
    query: {
        fromDate: string;
        toDate: string;
        transactionType?: (\\"TopUp\\" | \\"ElectricityUsageCharge\\" | \\"ElectricityStandingCharge\\" | \\"BalanceAdjustment\\")[];
    };
}

export interface AdjustBalanceRequest {
    transactionId?: string;
    /**
     * Signed amount to adjust the balance with
     */
    amount?: number;
    /**
     * Adjustment date-time
     */
    transactionDateTime?: string;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit'
     */
    cause?: string;
    [key: string]: any;
}

export type ApiV2AccountsAccountIdAdjustbalancePostResponse = (BalanceSummaryHttpResponse | LaminarResponse<BalanceSummaryHttpResponse>) | LaminarResponse<HttpErrorResponse> | LaminarResponse<HttpErrorResponse>;

export interface ApiV2AccountsAccountIdAdjustbalancePostContext extends OapiContext, RouteContext {
    path: {
        accountId: string;
    };
    body: AdjustBalanceRequest;
}

export type ApiV3AccountsAccountIdBalanceGetResponse = (BalanceSummaryHttpResponse | LaminarResponse<BalanceSummaryHttpResponse>) | LaminarResponse<HttpErrorResponse> | LaminarResponse<HttpErrorResponse>;

export interface ApiV3AccountsAccountIdBalanceGetContext extends OapiContext, RouteContext {
    path: {
        accountId: string;
    };
}

export interface TransactionHistoryHttpResponseV3 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | UsageChargeTransactionEntity | StandingChargeTransactionEntity)[];
    [key: string]: any;
}

export interface UsageChargeTransactionEntity {
    transactionType?: \\"ElectricityUsageCharge\\";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: \\"Electricity\\" | \\"Gas\\";
    /**
     * Meter Serial Number
     */
    msn?: string;
    /**
     * The meter read that triggered the charge.
     */
    read?: number;
    /**
     * The consumption amount (kwH) corresponding to this charge.
     */
    consumption?: number;
    [key: string]: any;
}

export interface StandingChargeTransactionEntity {
    transactionType?: \\"ElectricityStandingCharge\\";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: \\"Electricity\\" | \\"Gas\\";
    [key: string]: any;
}

export type ApiV3AccountsAccountIdTransactionsGetResponse = (TransactionHistoryHttpResponseV3 | LaminarResponse<TransactionHistoryHttpResponseV3>) | LaminarResponse<HttpErrorResponse> | LaminarResponse<HttpErrorResponse>;

export interface ApiV3AccountsAccountIdTransactionsGetContext extends OapiContext, RouteContext {
    path: {
        accountId: string;
    };
    query: {
        fromDate: string;
        toDate: string;
        transactionType?: (\\"TopUp\\" | \\"ElectricityUsageCharge\\" | \\"ElectricityStandingCharge\\" | \\"BalanceAdjustment\\")[];
    };
}

export type ApiV3AccountsAccountIdAdjustbalancePostResponse = (BalanceSummaryHttpResponse | LaminarResponse<BalanceSummaryHttpResponse>) | LaminarResponse<HttpErrorResponse> | LaminarResponse<HttpErrorResponse>;

export interface ApiV3AccountsAccountIdAdjustbalancePostContext extends OapiContext, RouteContext {
    path: {
        accountId: string;
    };
    body: AdjustBalanceRequest;
}

export interface SecurityResolvers<TContext = {}> extends OapiSecurityResolvers<TContext> {
    BasicAuth: OapiSecurityResolver;
    BearerAuth: OapiSecurityResolver;
    ApiKeyAuth: OapiSecurityResolver;
}"
`;

exports[`Json Schema Ts Test link-example.yaml 1`] = `
"import { LaminarResponse, ResolverResponse, RouteContext } from \\"@ovotech/laminar\\";

import { OapiContext, OapiPaths, OapiSecurityResolver, OapiSecurityResolvers } from \\"@ovotech/laminar-oapi\\";

export interface Paths<TContext = {}> extends OapiPaths<TContext> {
    \\"/2.0/users/{username}\\": {
        get: (context: 20UsersUsernameGetContext & TContext) => 20UsersUsernameGetResponse;
    };
    \\"/2.0/repositories/{username}\\": {
        get: (context: 20RepositoriesUsernameGetContext & TContext) => 20RepositoriesUsernameGetResponse;
    };
    \\"/2.0/repositories/{username}/{slug}\\": {
        get: (context: 20RepositoriesUsernameSlugGetContext & TContext) => 20RepositoriesUsernameSlugGetResponse;
    };
    \\"/2.0/repositories/{username}/{slug}/pullrequests\\": {
        get: (context: 20RepositoriesUsernameSlugPullrequestsGetContext & TContext) => 20RepositoriesUsernameSlugPullrequestsGetResponse;
    };
    \\"/2.0/repositories/{username}/{slug}/pullrequests/{pid}\\": {
        get: (context: 20RepositoriesUsernameSlugPullrequestsPidGetContext & TContext) => 20RepositoriesUsernameSlugPullrequestsPidGetResponse;
    };
    \\"/2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge\\": {
        post: (context: 20RepositoriesUsernameSlugPullrequestsPidMergePostContext & TContext) => ResolverResponse;
    };
}

export interface user {
    username?: string;
    uuid?: string;
    [key: string]: any;
}

export type 20UsersUsernameGetResponse = (user | LaminarResponse<user>);

export interface 20UsersUsernameGetContext extends OapiContext, RouteContext {
    path: {
        username: string;
    };
}

export interface repository {
    slug?: string;
    owner?: user;
    [key: string]: any;
}

export type 20RepositoriesUsernameGetResponse = (repository[] | LaminarResponse<repository[]>);

export interface 20RepositoriesUsernameGetContext extends OapiContext, RouteContext {
    path: {
        username: string;
    };
}

export type 20RepositoriesUsernameSlugGetResponse = (repository | LaminarResponse<repository>);

export interface 20RepositoriesUsernameSlugGetContext extends OapiContext, RouteContext {
    path: {
        username: string;
        slug: string;
    };
}

export interface pullrequest {
    id?: number;
    title?: string;
    repository?: repository;
    author?: user;
    [key: string]: any;
}

export type 20RepositoriesUsernameSlugPullrequestsGetResponse = (pullrequest[] | LaminarResponse<pullrequest[]>);

export interface 20RepositoriesUsernameSlugPullrequestsGetContext extends OapiContext, RouteContext {
    path: {
        username: string;
        slug: string;
    };
    query: {
        state?: \\"open\\" | \\"merged\\" | \\"declined\\";
    };
}

export type 20RepositoriesUsernameSlugPullrequestsPidGetResponse = (pullrequest | LaminarResponse<pullrequest>);

export interface 20RepositoriesUsernameSlugPullrequestsPidGetContext extends OapiContext, RouteContext {
    path: {
        username: string;
        slug: string;
        pid: string;
    };
}

export interface 20RepositoriesUsernameSlugPullrequestsPidMergePostContext extends OapiContext, RouteContext {
    path: {
        username: string;
        slug: string;
        pid: string;
    };
}"
`;

exports[`Json Schema Ts Test petstore.yaml 1`] = `
"import { LaminarResponse, RouteContext } from \\"@ovotech/laminar\\";

import { OapiContext, OapiPaths, OapiSecurityResolver, OapiSecurityResolvers } from \\"@ovotech/laminar-oapi\\";

export interface Paths<TContext = {}> extends OapiPaths<TContext> {
    \\"/pets\\": {
        get: (context: PetsGetContext & TContext) => PetsGetResponse;
        post: (context: PetsPostContext & TContext) => PetsPostResponse;
    };
    \\"/pets/{petId}\\": {
        get: (context: PetsPetIdGetContext & TContext) => PetsPetIdGetResponse;
    };
}

export type Pets = Pet[];

export interface Pet {
    id: number;
    name: string;
    tag?: string;
    [key: string]: any;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: any;
}

export type PetsGetResponse = (Pets | LaminarResponse<Pets>) | (Error | LaminarResponse<Error>);

export interface PetsGetContext extends OapiContext, RouteContext {
    query: {
        limit?: number;
    };
}

export type PetsPostResponse = (Error | LaminarResponse<Error>);

export interface PetsPostContext extends OapiContext, RouteContext {
}

export type PetsPetIdGetResponse = (Pets | LaminarResponse<Pets>) | (Error | LaminarResponse<Error>);

export interface PetsPetIdGetContext extends OapiContext, RouteContext {
    path: {
        petId: string;
    };
}"
`;

exports[`Json Schema Ts Test petstore-expanded.yaml 1`] = `
"import { LaminarResponse, RouteContext } from \\"@ovotech/laminar\\";

import { OapiContext, OapiPaths, OapiSecurityResolver, OapiSecurityResolvers } from \\"@ovotech/laminar-oapi\\";

export interface Paths<TContext = {}> extends OapiPaths<TContext> {
    \\"/pets\\": {
        /**
         * Returns all pets from the system that the user has access to
         * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
         *
         * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
         *
         */
        get: (context: PetsGetContext & TContext) => PetsGetResponse;
        /**
         * Creates a new pet in the store.  Duplicates are allowed
         */
        post: (context: PetsPostContext & TContext) => PetsPostResponse;
    };
    \\"/pets/{id}\\": {
        /**
         * Returns a user based on a single ID, if the user does not have access to the pet
         */
        get: (context: PetsIdGetContext & TContext) => PetsIdGetResponse;
        /**
         * deletes a single pet based on the ID supplied
         */
        delete: (context: PetsIdDeleteContext & TContext) => PetsIdDeleteResponse;
    };
}

export type Pet = NewPet & {
    id: number;
    [key: string]: any;
};

export interface NewPet {
    name: string;
    tag?: string;
    [key: string]: any;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: any;
}

export type PetsGetResponse = (Pet[] | LaminarResponse<Pet[]>) | (Error | LaminarResponse<Error>);

export interface PetsGetContext extends OapiContext, RouteContext {
    query: {
        tags?: string[];
        limit?: number;
    };
}

export type PetsPostResponse = (Pet | LaminarResponse<Pet>) | (Error | LaminarResponse<Error>);

export interface PetsPostContext extends OapiContext, RouteContext {
    body: NewPet;
}

export type PetsIdGetResponse = (Pet | LaminarResponse<Pet>) | (Error | LaminarResponse<Error>);

export interface PetsIdGetContext extends OapiContext, RouteContext {
    path: {
        id: number;
    };
}

export type PetsIdDeleteResponse = (Error | LaminarResponse<Error>);

export interface PetsIdDeleteContext extends OapiContext, RouteContext {
    path: {
        id: number;
    };
}"
`;

exports[`Json Schema Ts Test uspto.yaml 1`] = `
"import { LaminarResponse, RouteContext } from \\"@ovotech/laminar\\";

import { OapiContext, OapiPaths, OapiSecurityResolver, OapiSecurityResolvers } from \\"@ovotech/laminar-oapi\\";

export interface Paths<TContext = {}> extends OapiPaths<TContext> {
    \\"/\\": {
        get: (context: GetContext & TContext) => GetResponse;
    };
    \\"/{dataset}/{version}/fields\\": {
        /**
         * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
         */
        get: (context: DatasetVersionFieldsGetContext & TContext) => DatasetVersionFieldsGetResponse;
    };
    \\"/{dataset}/{version}/records\\": {
        /**
         * This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
         */
        post: (context: DatasetVersionRecordsPostContext & TContext) => DatasetVersionRecordsPostResponse;
    };
}

export interface dataSetList {
    total?: number;
    apis?: {
        /**
         * To be used as a dataset parameter value
         */
        apiKey?: string;
        /**
         * To be used as a version parameter value
         */
        apiVersionNumber?: string;
        /**
         * The URL describing the dataset's fields
         */
        apiUrl?: string;
        /**
         * A URL to the API console for each API
         */
        apiDocumentationUrl?: string;
        [key: string]: any;
    }[];
    [key: string]: any;
}

export type GetResponse = (dataSetList | LaminarResponse<dataSetList>);

export interface GetContext extends OapiContext, RouteContext {
}

export type DatasetVersionFieldsGetResponse = (string | LaminarResponse<string>) | LaminarResponse<string>;

export interface DatasetVersionFieldsGetContext extends OapiContext, RouteContext {
    path: {
        dataset: string;
        version: string;
    };
}

export type DatasetVersionRecordsPostResponse = (any[] | LaminarResponse<any[]>);

export interface DatasetVersionRecordsPostContext extends OapiContext, RouteContext {
    path: {
        version: string;
        dataset: string;
    };
    body?: any;
}"
`;
