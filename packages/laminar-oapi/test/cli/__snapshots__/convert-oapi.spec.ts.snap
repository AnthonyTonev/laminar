// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Json Schema Ts Test api-with-examples.yaml 1`] = `
"import { LaminarResponse } from \\"@ovotech/laminar\\";

import { OapiConfig, OapiContext } from \\"@ovotech/laminar-oapi\\";

export interface Config<C extends {} = {}> extends OapiConfig<C> {
    paths: {
        \\"/\\": {
            get: (context: TGetContext & C) => TGetResponse;
        };
        \\"/v2\\": {
            get: (context: TV2GetContext & C) => TV2GetResponse;
        };
    };
}

export type TGetResponse = (LaminarResponse | Promise<LaminarResponse>) | (LaminarResponse | Promise<LaminarResponse>);

export interface TGetContext extends OapiContext {
}

export type TV2GetResponse = (LaminarResponse | Promise<LaminarResponse>) | (LaminarResponse | Promise<LaminarResponse>);

export interface TV2GetContext extends OapiContext {
}"
`;

exports[`Json Schema Ts Test balance-service.yaml 1`] = `
"import { LaminarResponse } from \\"@ovotech/laminar\\";

import { OapiConfig, OapiContext, OapiSecurityResolver } from \\"@ovotech/laminar-oapi\\";

export interface Config<C extends {} = {}> extends OapiConfig<C> {
    paths: {
        \\"/internal/status\\": {
            /**
             * Returns 200 if the application is up. It does not do deep check. Always gives back 200.
             */
            get: (context: TInternalStatusGetContext & C) => TInternalStatusGetResponse;
        };
        \\"/internal/swagger.yaml\\": {
            get: (context: TInternalSwaggeryamlGetContext & C) => TInternalSwaggeryamlGetResponse;
        };
        \\"/api/v2/accounts/{accountId}/balance\\": {
            /**
             * Returns the balance
             */
            get: (context: TApiV2AccountsAccountIdBalanceGetContext & C) => TApiV2AccountsAccountIdBalanceGetResponse;
        };
        \\"/api/v2/accounts/{accountId}/transactions\\": {
            /**
             * Returns the transaction history
             */
            get: (context: TApiV2AccountsAccountIdTransactionsGetContext & C) => TApiV2AccountsAccountIdTransactionsGetResponse;
        };
        \\"/api/v2/accounts/{accountId}/adjust-balance\\": {
            /**
             * Returns with the adjusted balance
             */
            post: (context: TApiV2AccountsAccountIdAdjustbalancePostContext & C) => TApiV2AccountsAccountIdAdjustbalancePostResponse;
        };
        \\"/api/v3/accounts/{accountId}/balance\\": {
            /**
             * Returns the balance
             */
            get: (context: TApiV3AccountsAccountIdBalanceGetContext & C) => TApiV3AccountsAccountIdBalanceGetResponse;
        };
        \\"/api/v3/accounts/{accountId}/transactions\\": {
            /**
             * Returns the transaction history
             */
            get: (context: TApiV3AccountsAccountIdTransactionsGetContext & C) => TApiV3AccountsAccountIdTransactionsGetResponse;
        };
        \\"/api/v3/accounts/{accountId}/adjust-balance\\": {
            /**
             * Returns with the adjusted balance
             */
            post: (context: TApiV3AccountsAccountIdAdjustbalancePostContext & C) => TApiV3AccountsAccountIdAdjustbalancePostResponse;
        };
    };
    security: {
        BasicAuth: OapiSecurityResolver<C>;
        BearerAuth: OapiSecurityResolver<C>;
        ApiKeyAuth: OapiSecurityResolver<C>;
    };
}

export type TInternalStatusGetResponse = (LaminarResponse | Promise<LaminarResponse>);

export interface TInternalStatusGetContext extends OapiContext {
}

export type TInternalSwaggeryamlGetResponse = (LaminarResponse | Promise<LaminarResponse>);

export interface TInternalSwaggeryamlGetContext extends OapiContext {
}

export interface BalanceSummaryHttpResponse {
    balance?: number;
    /**
     * Last transaction date-time which updated the balance
     */
    effectiveAt?: string;
    /**
     * When balance service updated the balance
     */
    updatedAt?: string;
    [key: string]: any;
}

export interface HttpErrorResponse {
    /**
     * PLANNED. Currently not sent
     */
    errorCode?: string;
    message?: string;
    [key: string]: any;
}

export type TApiV2AccountsAccountIdBalanceGetResponse = (BalanceSummaryHttpResponse | LaminarResponse<BalanceSummaryHttpResponse> | Promise<BalanceSummaryHttpResponse> | Promise<LaminarResponse<BalanceSummaryHttpResponse>>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>) | (LaminarResponse | Promise<LaminarResponse>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>);

export interface TApiV2AccountsAccountIdBalanceGetContext extends OapiContext {
    path: {
        accountId: string;
    };
}

export interface TransactionHistoryHttpResponseV2 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | ChargeTransactionEntity)[];
    [key: string]: any;
}

export interface TransactionHistorySummary {
    /**
     * Number of search hits
     */
    totalSize?: number;
    [key: string]: any;
}

export interface GenericTransactionEntity {
    transactionType?: \\"TopUp\\" | \\"BalanceAdjustment\\";
    amount?: number;
    transactionDateTime?: string;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit', 'AppPayment'
     */
    cause?: string;
    [key: string]: any;
}

export interface ChargeTransactionEntity {
    transactionType?: \\"ElectricityUsageCharge\\" | \\"ElectricityStandingCharge\\";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: \\"Electricity\\" | \\"Gas\\";
    [key: string]: any;
}

export type TApiV2AccountsAccountIdTransactionsGetResponse = (TransactionHistoryHttpResponseV2 | LaminarResponse<TransactionHistoryHttpResponseV2> | Promise<TransactionHistoryHttpResponseV2> | Promise<LaminarResponse<TransactionHistoryHttpResponseV2>>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>);

export interface TApiV2AccountsAccountIdTransactionsGetContext extends OapiContext {
    path: {
        accountId: string;
    };
    headers: {
        scenario?: string;
    };
    cookies: {
        session?: string;
    };
    query: {
        fromDate: string;
        toDate: string;
        transactionType?: (\\"TopUp\\" | \\"ElectricityUsageCharge\\" | \\"ElectricityStandingCharge\\" | \\"BalanceAdjustment\\")[];
    };
}

export interface AdjustBalanceRequest {
    transactionId?: string;
    /**
     * Signed amount to adjust the balance with
     */
    amount?: number;
    /**
     * Adjustment date-time
     */
    transactionDateTime?: string;
    /**
     * CamelCased cause why the adjustment is needed, e.g. 'GoodWill', 'WarmHomeDiscount', 'DiscretionaryCredit'
     */
    cause?: string;
    [key: string]: any;
}

export type TApiV2AccountsAccountIdAdjustbalancePostResponse = (BalanceSummaryHttpResponse | LaminarResponse<BalanceSummaryHttpResponse> | Promise<BalanceSummaryHttpResponse> | Promise<LaminarResponse<BalanceSummaryHttpResponse>>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>) | (LaminarResponse | Promise<LaminarResponse>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>);

export interface TApiV2AccountsAccountIdAdjustbalancePostContext extends OapiContext {
    path: {
        accountId: string;
    };
    body: AdjustBalanceRequest;
}

export type TApiV3AccountsAccountIdBalanceGetResponse = (BalanceSummaryHttpResponse | LaminarResponse<BalanceSummaryHttpResponse> | Promise<BalanceSummaryHttpResponse> | Promise<LaminarResponse<BalanceSummaryHttpResponse>>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>) | (LaminarResponse | Promise<LaminarResponse>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>);

export interface TApiV3AccountsAccountIdBalanceGetContext extends OapiContext {
    path: {
        accountId: string;
    };
}

export interface TransactionHistoryHttpResponseV3 {
    summary?: TransactionHistorySummary;
    /**
     * List of transactions ordered by transactionDateTime in ascending order.
     */
    transactions?: (GenericTransactionEntity | UsageChargeTransactionEntity | StandingChargeTransactionEntity)[];
    [key: string]: any;
}

export interface UsageChargeTransactionEntity {
    transactionType?: \\"ElectricityUsageCharge\\";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: \\"Electricity\\" | \\"Gas\\";
    /**
     * Meter Serial Number
     */
    msn?: string;
    /**
     * The meter read that triggered the charge.
     */
    read?: number;
    /**
     * The consumption amount (kwH) corresponding to this charge.
     */
    consumption?: number;
    [key: string]: any;
}

export interface StandingChargeTransactionEntity {
    transactionType?: \\"ElectricityStandingCharge\\";
    amount?: number;
    transactionDateTime?: string;
    fuelType?: \\"Electricity\\" | \\"Gas\\";
    [key: string]: any;
}

export type TApiV3AccountsAccountIdTransactionsGetResponse = (TransactionHistoryHttpResponseV3 | LaminarResponse<TransactionHistoryHttpResponseV3> | Promise<TransactionHistoryHttpResponseV3> | Promise<LaminarResponse<TransactionHistoryHttpResponseV3>>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>);

export interface TApiV3AccountsAccountIdTransactionsGetContext extends OapiContext {
    path: {
        accountId: string;
    };
    query: {
        fromDate: string;
        toDate: string;
        transactionType?: (\\"TopUp\\" | \\"ElectricityUsageCharge\\" | \\"ElectricityStandingCharge\\" | \\"BalanceAdjustment\\")[];
    };
}

export type TApiV3AccountsAccountIdAdjustbalancePostResponse = (BalanceSummaryHttpResponse | LaminarResponse<BalanceSummaryHttpResponse> | Promise<BalanceSummaryHttpResponse> | Promise<LaminarResponse<BalanceSummaryHttpResponse>>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>) | (LaminarResponse | Promise<LaminarResponse>) | (LaminarResponse<HttpErrorResponse> | Promise<LaminarResponse<HttpErrorResponse>>);

export interface TApiV3AccountsAccountIdAdjustbalancePostContext extends OapiContext {
    path: {
        accountId: string;
    };
    body: AdjustBalanceRequest;
}"
`;

exports[`Json Schema Ts Test converter.yaml 1`] = `
"import { LaminarResponse } from \\"@ovotech/laminar\\";

import { OapiConfig, OapiContext } from \\"@ovotech/laminar-oapi\\";

export interface Config<C extends {} = {}> extends OapiConfig<C> {
    paths: {
        \\"/.well-known/docs\\": {
            get: (context: TWellknownDocsGetContext & C) => TWellknownDocsGetResponse;
        };
        \\"/.well-known/openapi.yaml\\": {
            get: (context: TWellknownOpenapiyamlGetContext & C) => TWellknownOpenapiyamlGetResponse;
        };
        \\"/html\\": {
            post: (context: THtmlPostContext & C) => THtmlPostResponse;
        };
    };
}

export type TWellknownDocsGetResponse = (LaminarResponse | Promise<LaminarResponse>);

export interface TWellknownDocsGetContext extends OapiContext {
}

export type TWellknownOpenapiyamlGetResponse = (LaminarResponse | Promise<LaminarResponse>);

export interface TWellknownOpenapiyamlGetContext extends OapiContext {
}

export interface HttpError {
    message?: string;
}

export type THtmlPostResponse = (LaminarResponse | Promise<LaminarResponse>) | (HttpError | LaminarResponse<HttpError> | Promise<HttpError> | Promise<LaminarResponse<HttpError>>);

export interface THtmlPostContext extends OapiContext {
    body: any;
}"
`;

exports[`Json Schema Ts Test link-example.yaml 1`] = `
"import { LaminarResponse } from \\"@ovotech/laminar\\";

import { OapiConfig, OapiContext } from \\"@ovotech/laminar-oapi\\";

export interface Config<C extends {} = {}> extends OapiConfig<C> {
    paths: {
        \\"/2.0/users/{username}\\": {
            get: (context: T20UsersUsernameGetContext & C) => T20UsersUsernameGetResponse;
        };
        \\"/2.0/repositories/{username}\\": {
            get: (context: T20RepositoriesUsernameGetContext & C) => T20RepositoriesUsernameGetResponse;
        };
        \\"/2.0/repositories/{username}/{slug}\\": {
            get: (context: T20RepositoriesUsernameSlugGetContext & C) => T20RepositoriesUsernameSlugGetResponse;
        };
        \\"/2.0/repositories/{username}/{slug}/pullrequests\\": {
            get: (context: T20RepositoriesUsernameSlugPullrequestsGetContext & C) => T20RepositoriesUsernameSlugPullrequestsGetResponse;
        };
        \\"/2.0/repositories/{username}/{slug}/pullrequests/{pid}\\": {
            get: (context: T20RepositoriesUsernameSlugPullrequestsPidGetContext & C) => T20RepositoriesUsernameSlugPullrequestsPidGetResponse;
        };
        \\"/2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge\\": {
            post: (context: T20RepositoriesUsernameSlugPullrequestsPidMergePostContext & C) => T20RepositoriesUsernameSlugPullrequestsPidMergePostResponse;
        };
    };
}

export interface user {
    username?: string;
    uuid?: string;
    [key: string]: any;
}

export type T20UsersUsernameGetResponse = (user | LaminarResponse<user> | Promise<user> | Promise<LaminarResponse<user>>);

export interface T20UsersUsernameGetContext extends OapiContext {
    path: {
        username: string;
    };
}

export interface repository {
    slug?: string;
    owner?: user;
    [key: string]: any;
}

export type T20RepositoriesUsernameGetResponse = (repository[] | LaminarResponse<repository[]> | Promise<repository[]> | Promise<LaminarResponse<repository[]>>);

export interface T20RepositoriesUsernameGetContext extends OapiContext {
    path: {
        username: string;
    };
}

export type T20RepositoriesUsernameSlugGetResponse = (repository | LaminarResponse<repository> | Promise<repository> | Promise<LaminarResponse<repository>>);

export interface T20RepositoriesUsernameSlugGetContext extends OapiContext {
    path: {
        username: string;
        slug: string;
    };
}

export interface pullrequest {
    id?: number;
    title?: string;
    repository?: repository;
    author?: user;
    [key: string]: any;
}

export type T20RepositoriesUsernameSlugPullrequestsGetResponse = (pullrequest[] | LaminarResponse<pullrequest[]> | Promise<pullrequest[]> | Promise<LaminarResponse<pullrequest[]>>);

export interface T20RepositoriesUsernameSlugPullrequestsGetContext extends OapiContext {
    path: {
        username: string;
        slug: string;
    };
    query: {
        state?: \\"open\\" | \\"merged\\" | \\"declined\\";
    };
}

export type T20RepositoriesUsernameSlugPullrequestsPidGetResponse = (pullrequest | LaminarResponse<pullrequest> | Promise<pullrequest> | Promise<LaminarResponse<pullrequest>>);

export interface T20RepositoriesUsernameSlugPullrequestsPidGetContext extends OapiContext {
    path: {
        username: string;
        slug: string;
        pid: string;
    };
}

export type T20RepositoriesUsernameSlugPullrequestsPidMergePostResponse = (LaminarResponse | Promise<LaminarResponse>);

export interface T20RepositoriesUsernameSlugPullrequestsPidMergePostContext extends OapiContext {
    path: {
        username: string;
        slug: string;
        pid: string;
    };
}"
`;

exports[`Json Schema Ts Test petstore.yaml 1`] = `
"import { LaminarResponse } from \\"@ovotech/laminar\\";

import { OapiConfig, OapiContext } from \\"@ovotech/laminar-oapi\\";

export interface Config<C extends {} = {}> extends OapiConfig<C> {
    paths: {
        \\"/pets\\": {
            get: (context: TPetsGetContext & C) => TPetsGetResponse;
            post: (context: TPetsPostContext & C) => TPetsPostResponse;
        };
        \\"/pets/{petId}\\": {
            get: (context: TPetsPetIdGetContext & C) => TPetsPetIdGetResponse;
        };
    };
}

export type Pets = Pet[];

export interface Pet {
    id: number;
    name: string;
    tag?: string;
    [key: string]: any;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: any;
}

export type TPetsGetResponse = (Pets | LaminarResponse<Pets> | Promise<Pets> | Promise<LaminarResponse<Pets>>) | (Error | LaminarResponse<Error> | Promise<Error> | Promise<LaminarResponse<Error>>);

export interface TPetsGetContext extends OapiContext {
    query: {
        limit?: number;
    };
}

export type TPetsPostResponse = (LaminarResponse | Promise<LaminarResponse>) | (Error | LaminarResponse<Error> | Promise<Error> | Promise<LaminarResponse<Error>>);

export interface TPetsPostContext extends OapiContext {
}

export type TPetsPetIdGetResponse = (Pets | LaminarResponse<Pets> | Promise<Pets> | Promise<LaminarResponse<Pets>>) | (Error | LaminarResponse<Error> | Promise<Error> | Promise<LaminarResponse<Error>>);

export interface TPetsPetIdGetContext extends OapiContext {
    path: {
        petId: string;
    };
}"
`;

exports[`Json Schema Ts Test petstore-expanded.yaml 1`] = `
"import { LaminarResponse } from \\"@ovotech/laminar\\";

import { OapiConfig, OapiContext } from \\"@ovotech/laminar-oapi\\";

export interface Config<C extends {} = {}> extends OapiConfig<C> {
    paths: {
        \\"/pets\\": {
            /**
             * Returns all pets from the system that the user has access to
             * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
             *
             * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
             *
             */
            get: (context: TPetsGetContext & C) => TPetsGetResponse;
            /**
             * Creates a new pet in the store.  Duplicates are allowed
             */
            post: (context: TPetsPostContext & C) => TPetsPostResponse;
        };
        \\"/pets/{id}\\": {
            /**
             * Returns a user based on a single ID, if the user does not have access to the pet
             */
            get: (context: TPetsIdGetContext & C) => TPetsIdGetResponse;
            /**
             * deletes a single pet based on the ID supplied
             */
            delete: (context: TPetsIdDeleteContext & C) => TPetsIdDeleteResponse;
        };
    };
}

export type Pet = NewPet & {
    id: number;
    [key: string]: any;
};

export interface NewPet {
    name: string;
    tag?: string;
    [key: string]: any;
}

export interface Error {
    code: number;
    message: string;
    [key: string]: any;
}

export type TPetsGetResponse = (Pet[] | LaminarResponse<Pet[]> | Promise<Pet[]> | Promise<LaminarResponse<Pet[]>>) | (Error | LaminarResponse<Error> | Promise<Error> | Promise<LaminarResponse<Error>>);

export interface TPetsGetContext extends OapiContext {
    query: {
        tags?: string[];
        limit?: number;
    };
}

export type TPetsPostResponse = (Pet | LaminarResponse<Pet> | Promise<Pet> | Promise<LaminarResponse<Pet>>) | (Error | LaminarResponse<Error> | Promise<Error> | Promise<LaminarResponse<Error>>);

export interface TPetsPostContext extends OapiContext {
    body: NewPet;
}

export type TPetsIdGetResponse = (Pet | LaminarResponse<Pet> | Promise<Pet> | Promise<LaminarResponse<Pet>>) | (Error | LaminarResponse<Error> | Promise<Error> | Promise<LaminarResponse<Error>>);

export interface TPetsIdGetContext extends OapiContext {
    path: {
        id: number;
    };
}

export type TPetsIdDeleteResponse = (LaminarResponse | Promise<LaminarResponse>) | (Error | LaminarResponse<Error> | Promise<Error> | Promise<LaminarResponse<Error>>);

export interface TPetsIdDeleteContext extends OapiContext {
    path: {
        id: number;
    };
}"
`;

exports[`Json Schema Ts Test uspto.yaml 1`] = `
"import { LaminarResponse } from \\"@ovotech/laminar\\";

import { OapiConfig, OapiContext } from \\"@ovotech/laminar-oapi\\";

export interface Config<C extends {} = {}> extends OapiConfig<C> {
    paths: {
        \\"/\\": {
            get: (context: TGetContext & C) => TGetResponse;
        };
        \\"/{dataset}/{version}/fields\\": {
            /**
             * This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
             */
            get: (context: TDatasetVersionFieldsGetContext & C) => TDatasetVersionFieldsGetResponse;
        };
        \\"/{dataset}/{version}/records\\": {
            /**
             * This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
             */
            post: (context: TDatasetVersionRecordsPostContext & C) => TDatasetVersionRecordsPostResponse;
        };
    };
}

export interface dataSetList {
    total?: number;
    apis?: {
        /**
         * To be used as a dataset parameter value
         */
        apiKey?: string;
        /**
         * To be used as a version parameter value
         */
        apiVersionNumber?: string;
        /**
         * The URL describing the dataset's fields
         */
        apiUrl?: string;
        /**
         * A URL to the API console for each API
         */
        apiDocumentationUrl?: string;
        [key: string]: any;
    }[];
    [key: string]: any;
}

export type TGetResponse = (dataSetList | LaminarResponse<dataSetList> | Promise<dataSetList> | Promise<LaminarResponse<dataSetList>>);

export interface TGetContext extends OapiContext {
}

export type TDatasetVersionFieldsGetResponse = (string | LaminarResponse<string> | Promise<string> | Promise<LaminarResponse<string>>) | (LaminarResponse<string> | Promise<LaminarResponse<string>>);

export interface TDatasetVersionFieldsGetContext extends OapiContext {
    path: {
        dataset: string;
        version: string;
    };
}

export type TDatasetVersionRecordsPostResponse = (any[] | LaminarResponse<any[]> | Promise<any[]> | Promise<LaminarResponse<any[]>>) | (LaminarResponse | Promise<LaminarResponse>);

export interface TDatasetVersionRecordsPostContext extends OapiContext {
    path: {
        version: string;
        dataset: string;
    };
    body?: any;
}"
`;
