openapi: '3.0.3'
info:
  version: v3
  title: Comms Platform API
  description: |
    # Introduction
    Welcome to the _Comms Platform API_ Documentation. The _Comms Platform API_
    allows you to send communication via HTTP from your services to customers.

    # Authentication
    The Comms API uses OAuth 2.0 for authenticating *all* API requests by using
    the Identity platform.

    To find out more about obtaining an access token visit the documentation of
    the [Identity platform](https://sites.google.com/example.com/identity).
    <security-definitions />
servers:
  - url: https://api.uat.example.com/v3
    description: UAT environment
  - url: https://api.example.com/v3
    description: Production environment
paths:
  /communication:
    post:
      summary: Send a communication
      parameters:
        - in: header
          name: X-Trace-Token
          schema:
            type: string
          required: true
      description: |
        Sends a communication to a customer or to an arbitrary address.

        *Note: Foo teams can send by Account Id instead [using the dedicated `/foo/communication` endpoint](#operationId/sendCommByAcc).*

        The response is a unique ID (comm ID) for the newly created communication.
        This can be used to filter our feedback kafka topic to check for comm's
        statuses.

        *Note: This API is asynchronous*
      operationId: sendComm
      tags:
        - Communication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunicationRequest'
            examples:
              sendByCustomerAccountId:
                summary: Send by customer and account ID
                description: An example request for an Foo customer using customer and account ID.
                value:
                  {
                    'deliverTo': { 'customer': 'example:053a050e-6b79-4403-b465-37c4f|1234567' },
                    'templateManifest':
                      { 'id': 'f4dc8f03-1a7a-45be-9b28-cfb05cbb32a4', 'version': '2.0' },
                    'friendlyDescription': 'Hello World',
                    'templateData':
                      {
                        'date': '27 November 2019',
                        'accountNumber': '20000002',
                        'totalcosts': '£28.78',
                      },
                    'preferredChannels': ['Email'],
                    'attachments':
                      [
                        {
                          'fileName': 'Final Statement',
                          'id': '3e7dfca3-4bd5-4d7c-913c-8380e5993fc0',
                        },
                      ],
                  }

              sendByContactDetails:
                summary: Send by contact details
                description: |
                  An example request for a non Foo or Bar customer where we send by contact details only
                  and schedule the comm to be sent in the future.
                value:
                  {
                    'deliverTo':
                      {
                        'contactDetails':
                          {
                            'emailAddress': 'john.doe@gmail.com',
                            'postalAddress':
                              {
                                'contactName': 'John Doe',
                                'line1': '12 Belsize Rd',
                                'line2': 'Flat 3',
                                'town': 'London',
                                'postcode': 'E1 3FR',
                                'country': 'UK',
                              },
                          },
                      },
                    'templateManifest':
                      { 'id': 'f4dc8f03-1a7a-45be-9b28-cfb05cbb32a4', 'version': '1.0' },
                    'templateData':
                      {
                        'date': '27 November 2019',
                        'accountNumber': '20000002',
                        'totalcosts': '£28.78',
                      },
                    'deliverAt': '2020-11-27T10:15:30Z',
                    'attachments':
                      [
                        {
                          'fileName': '20000002-2019-11.pdf',
                          'id': '3e7dfca3-4bd5-4d7c-913c-8380e5993fc1',
                        },
                      ],
                  }
      responses:
        '202':
          description: The request has been successful accepted.
          headers:
            X-Trace-Token:
              schema:
                type: string
              description: Returns the same trace token provided in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggeredCommunication'
        '400':
          description: |
            The request is malformed. Some header are missing or invalid.
            Do not retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: The request JSON body is malformed. Do not retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: MalformedRequest
                message: Detailed information about which filed is missing or invalid
        '503':
          description: |
            Some dependency is not available, probably Kafka is not responding.
          headers:
            X-Trace-Token:
              schema:
                type: string
              description: Returns the same trace token provided in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /foo/communication:
    post:
      summary: Send by account ID
      parameters:
        - in: header
          name: X-Trace-Token
          schema:
            type: string
          required: true
      description: |
        Sends communication(s) to Foo customers by account ID, for all customers
        in account with specified roles.

        If the account has multiple customers, the same comm will be sent out to all customers under this account.

        More details can be found at [http://docs.example.com/docs/brands/foo/](http://docs.example.com/docs/brands/foo/).

        The response is an array of unique ID(s) (comm ID(s)) for the newly
        created communication(s). These can be used to filter our feedback kafka
        topic to check for comm's statuses.

        *Note: This API is asynchronous*
      operationId: sendCommByAcc
      tags:
        - Communication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendByAccountRequest'
            examples:
              sendToFinanciallyLiable:
                summary: Send to financially liable customers
                description: Send comm to any financially liable customers in an account
                value:
                  {
                    'deliverTo':
                      { 'account': '1234567', 'roles': { 'include': ['financiallyliable'] } },
                    'templateManifest':
                      { 'id': 'f4dc8f03-1a7a-45be-9b28-cfb05cbb32a4', 'version': '2.0' },
                    'templateData':
                      {
                        'date': '27 November 2019',
                        'accountNumber': '20000002',
                        'totalcosts': '£28.78',
                      },
                    'attachments':
                      [
                        {
                          'fileName': 'Final Statement',
                          'id': '3e7dfca3-4bd5-4d7c-913c-8380e5993fc2',
                        },
                      ],
                  }
              sendToAllExcludeFinanciallyLiable:
                summary: Send to non financially liable customers
                description: Send comm to any non financially liable customers on an account
                value:
                  {
                    'deliverTo':
                      {
                        'account': '1234567',
                        'roles': { 'include': ['all'], 'exclude': ['financiallyliable'] },
                      },
                    'templateManifest':
                      { 'id': 'f4dc8f03-1a7a-45be-9b28-cfb05cbb32a4', 'version': '2.0' },
                    'templateData':
                      {
                        'date': '27 November 2019',
                        'accountNumber': '20000002',
                        'totalcosts': '£28.78',
                      },
                    'attachments':
                      [
                        {
                          'fileName': 'Final Statement',
                          'id': '3e7dfca3-4bd5-4d7c-913c-8380e5993fc2',
                        },
                      ],
                  }

      responses:
        '202':
          description: The request has been successful accepted.
          headers:
            X-Trace-Token:
              schema:
                type: string
              description: Returns the same trace token provided in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggeredCommunications'
        '400':
          description: |
            The request is malformed. Some header are missing or invalid.
            Do not retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: The request JSON body is malformed. Do not retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: MalformedRequest
                message: Detailed information about which filed is missing or invalid
        '503':
          description: Some dependency is not available, probably Kafka is not responding.
          headers:
            X-Trace-Token:
              schema:
                type: string
              description: Returns the same trace token provided in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /communication/{commId}:
    get:
      summary: Retrieve a communication
      description: |
        Returns a communication already processed by the platform.
      operationId: getComm
      tags:
        - Communication
      responses:
        '200':
          description: The communication has been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Communication'
        '404':
          description: |
            The comm corresponding with the commId passed in the request does
            not exist or has not yet been ingested by platform.

  /communication/{commId}/request:
    get:
      summary: Retrieve an original request
      description: |
        Returns the original request which triggers the communication by given comm ID.

        This is useful if you want to resend a communication which previously failed.
      operationId: getRequest
      tags:
        - Communication
      responses:
        '200':
          description: The original request has been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunicationRequest'
        '404':
          description: |
            The comm corresponding with the commId passed in the request does
            not exist or has not yet been ingested by platform, hence, the
            original request cannot be found.

  /attachment/{attachmentId}:
    get:
      summary: Download an attachment
      description: |
        Attachment which was uploaded to the platform can be redownloaded.
      operationId: getAttachment
      tags:
        - Attachment
      responses:
        '200':
          description: Successful response
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: |
            The attachment corresponding with the attachement ID passed in the
            request does not exist.

  /attachment:
    post:
      summary: Upload a file
      description: |
        Upload a file to comms platform for sending comm with attachments.
        The request has to be a `multipart/form-data` encoding. An ID is
        returned as response. This can be used to send communication with
        attachement(s).
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  format: binary
      operationId: uploadAttachment
      tags:
        - Attachment
      responses:
        '200':
          description: The file has been uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedAttachment'
        '400':
          description: The request is malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: InvalidRequest
                message: Multipart request does not have the required `content` part

  /rendered-fragment/{commId}/{fragmentId}:
    get:
      summary: Download a fragment
      description: |
        A communication is constructed by fragment(s) i.e: `subject`, `body`, `textBody`.
        This API returns the redered fragments which have been sent.
      operationId: getFragment
      tags:
        - Rendered Fragment
      responses:
        '200':
          description: |
            The rendered fragment(s) of a communicaiton, *Note:* Each fragment
            might have different `Content-Type`:
            - SMS's `body` fragment: `Content-Type: text/plain; charset=UTF-8`
            - Print's `body` fragment: `Content-Type: application/pdf; charset=UTF-8`
            - Email's `body` fragment: `Content-Type: text/html; charset=UTF-8`
            - Email's `subject` fragment: `Content-Type: text/plain; charset=UTF-8`
            - Email's `textBody` fragment: `Content-Type: text/plain; charset=UTF-8`
          content:
            text/plain:
              schema:
                type: string
                example: |
                  Reminder: Your energy plan needs renewing
        '404':
          description: |
            The fragment corresponding with the communication ID and fragment ID passed in the
            request does not exist.

components:
  schemas:
    Error:
      type: object
      description: A error raised by the platform.
      required:
        - code
        - reason
      properties:
        code:
          type: string
        reason:
          type: string
      example:
        code: MalformedRequest
        reason: Detailed information about which filed is missing or invalid

    TriggeredCommunication:
      type: object
      description: The triggered communication with unique ID.
      required:
        - id
      properties:
        id:
          type: string
      example:
        id: 0409549d-f7d3-4285-842a-a58120b12f2f

    Template:
      type: object
      description: The
      required:
        - id
        - version
      properties:
        id:
          description: The template's ID.
          type: string
        version:
          description: The template's version.
          type: string
        name:
          type: string
        commType:
          type: string
          enum:
            - Service
            - Marketing
            - Regulatory

    TemplateManifest:
      type: object
      description: |
        Specifies which template you want to use to construct the content of the communication.

        See [here for more details on Templates](http://docs.example.com/docs/guide/templates/overview).

      required:
        - id
        - version
      properties:
        id:
          description: The template ID.
          type: string
        version:
          description: The template version. i.e. `2.0`
          type: string

    DeliverTo:
      description: |
        Specifies the customer or address to send the comm to.

        Foo and Bar customers should always use 'Profile' as otherwise it will not be visable in the CRM
        system for customer support agents, etc..
      oneOf:
        - $ref: '#/components/schemas/Profile'
        - $ref: '#/components/schemas/ContactDetails'

    AccountProfile:
      type: object
      required:
        - account
        - roles
      properties:
        account:
          description: The account's ID which belongs to customer(s)
          type: string
        roles:
          description: |
            Within an account, customer(s) can have multiple roles, use this as
            a filter. Follow this [documentation](http://docs.example.com/docs/brands/foo/)
            for more information.
          type: object
          $ref: '#/components/schemas/RolesFilter'

    RolesFilter:
      type: object
      required:
        - include
      properties:
        include:
          description: A list of customer's role to be included
          type: array
          items:
            type: string
            enum:
              - all
              - primary
              - financiallyliable
        exclude:
          description: A list of customer's role to be excluded
          type: array
          items:
            type: string
            enum:
              - all
              - primary
              - financiallyliable

    Profile:
      type: object
      required:
        - customer
      properties:
        customer:
          description: |
            The id is constructed from `realm`:`customer_id`|`account_id`
            i.e. "example:053a050e-6b79-4403-b465-37c4e|1234"

            Where:
            - `realm` should be "legacy" for Bar customers, "example" for Foo, etc..
            - `customer_id` is an id representing a customer
            - `account_id` is an id representing an Foo account

            If an account id is not available you can use `realm`:`customer_id` where customer_id must be unique.

            It is recommended to always use CustomerAccountId as a CustomerId may be associated with multiple accounts
            with different contact details and preferences.
          type: string
          oneOf:
            - $ref: '#/components/schemas/CustomerAccountId'
            - $ref: '#/components/schemas/CustomerId'
        contactDetails:
          description: |
            This should only be included if you need to overwrite the stored address for a customer.
          type: object
          $ref: '#/components/schemas/ContactDetails'

    CustomerAccountId:
      description: |
        Intended only for Foo customers.

        The id is constructed from <realm>:<customer_id>|<account_id>
        i.e. `example:053a050e-6b79-4403-b465-37c4e|1234`

        Where:
        - <realm> should be `legacy` for Bar customers, `example` for Foo, etc..
        - <customer_id> is an id representing a customer
        - <account_id> is an id representing an Foo account
      type: string

    CustomerId:
      description: |
        Intended only for Bar customers or Foo customers who do not have an account.

        The id is constructed from <realm>:<customer_id> - i.e. `example:053a050e-6b79-4403-b465-37c4e`

        Where:
        - <realm> should be `legacy` for Bar customers, `example` for Foo, etc..
        - <customer_id> is a unique id representing a customer
      type: string

    ContactDetails:
      anyOf:
        - $ref: '#/components/schemas/EmailAddress'
        - $ref: '#/components/schemas/PhoneNumber'
        - $ref: '#/components/schemas/PostalAddress'

    Recipient:
      oneOf:
        - $ref: '#/components/schemas/EmailAddress'
        - $ref: '#/components/schemas/PhoneNumber'
        - $ref: '#/components/schemas/PostalAddress'

    Email:
      type: object
      required:
        - address
      properties:
        address:
          type: string

    Phone:
      type: object
      required:
        - number
      properties:
        number:
          type: string

    Postal:
      type: object
      required:
        - address
      properties:
        address:
          type: object
          $ref: '#/components/schemas/PostalAddress'

    EmailAddress:
      type: object
      required:
        - emailAddress
      properties:
        emailAddress:
          type: string

    PhoneNumber:
      type: object
      required:
        - phoneNumber
      properties:
        phoneNumber:
          type: string

    PostalAddress:
      type: object
      required:
        - line1
        - town
        - postcode
      properties:
        contactName:
          type: string
        company:
          type: string
        line1:
          type: string
        line2:
          type: string
        town:
          type: string
        county:
          type: string
        postcode:
          type: string
        country:
          type: string

    Failure:
      type: object
      required:
        - at
        - code
        - reason
      properties:
        at:
          description: |
            Timestamp of when the communication failed in ISO format
            such as '2011-12-03T10:15:30Z'.
          type: string
        code:
          type: string
        reason:
          type: string

    Content:
      oneOf:
        - $ref: '#/components/schemas/SmsContent'
        - $ref: '#/components/schemas/PrintContent'
        - $ref: '#/components/schemas/EmailContent'

    SmsContent:
      type: object
      required:
        - sms
      properties:
        sms:
          type: object
          properties:
            body:
              description: |
                A URL points to a downloadable content's body of which has been sent
                as communication
              type: string

    PrintContent:
      type: object
      required:
        - print
      properties:
        print:
          type: object
          properties:
            body:
              description: |
                A URL points to a downloadable content's body of which has been sent
                as communication
              type: string

    EmailContent:
      type: object
      required:
        - email
      properties:
        sender:
          type: string
          properties:
            subject:
              description: |
                A URL points to a downloadable content's subject which has been sent
                as communication
              type: string
            body:
              description: |
                A URL points to a downloadable content's body which has been sent
                as communication
              type: string
            textBody:
              description: |
                A URL points to a downloadable content's text body which has been sent
                as communication
              type: string

    Attachment:
      type: object
      required:
        - id
        - fileName
      properties:
        id:
          type: string
        fileName:
          type: string

    SpecialRequirements:
      type: object
      description: |
        Some customers require communication in special formats. This type
        represents formats such as Black and White, Large Print, Black
        and White and Large Print, Braille or Audio. Please note, these formats
        are neither the same level as communication's channels nor exclusive to
        postal. For example, Large Print can be large font email or letter.
      required:
        - preferences
      properties:
        preferences:
          type: array
          items:
            type: string
            enum:
              - BlackWhite
              - LargePrint
              - BlackWhiteLargePrint
              - Braille
              - Audio

    UploadedAttachment:
      type: object
      required:
        - id
      properties:
        id:
          type: string
      example:
        id: 0409549d-f7d3-4285-842a-a58120b12f2a

    Communication:
      type: object
      description: |
        The communication entity's representation.
        Internally, a communication goes through the following states:
        triggered/scheduled -> orchestrated -> composed -> issuedForDelivery -> delivered/expire/failed.
        At each state, a timestamp will be populated.
      required:
        - id
        - traceToken
        - template
        - status
        - description
        - source
        - isCanary
        - triggeredAt
        - deliverTo
        - attachments
      properties:
        id:
          type: string
        traceToken:
          type: string
        brand:
          type: string
        template:
          type: object
          $ref: '#/components/schemas/Template'
        status:
          description: |
            The current status of the communication:

            - Scheduled: The communication has been scheduled to be sent in the future
            - Pending: The communication is being processed
            - Delivered: The communication has been delivered
            - Failed: The communication has failed. The `failure` field will contain the reason and code
            - Expired: The communication has been failed to be delivered before the expiration datetime,
                       this has been deprecated in favour of `Failed` with `failure.code=CommsExpired`
          type: string
          enum:
            - Scheduled
            - Pending
            - Delivered
            - Expired
            - Failed
        description:
          type: string
        source:
          type: string
        isCanary:
          type: boolean
        triggeredAt:
          type: string
          description: |
            Timestamp of when the communication was triggered in ISO format
            such as '2011-12-03T10:15:30Z'.
        scheduledAt:
          type: string
          description: |
            Timestamp of when the communication was scheduled in ISO format
            such as '2011-12-03T10:15:30Z'.
        orchestratedAt:
          type: string
          description: |
            Timestamp of when the communication was orchestrated in ISO format
            such as '2011-12-03T10:15:30Z'.
        composedAt:
          type: string
          description: |
            Timestamp of when the communication was composed in ISO format
            such as '2011-12-03T10:15:30Z'.
        issuedForDeliveryAt:
          type: string
          description: |
            Timestamp of when the communication was sent in ISO format
            such as '2011-12-03T10:15:30Z'.
        deliveredAt:
          type: string
          description: |
            Timestamp of when the communication was delivered in ISO format
            such as '2011-12-03T10:15:30Z'.
        expireAt:
          type: string
          description: |
            Timestamp of when the communication was not being sent because
            the request had specified so in ISO format such as '2011-12-03T10:15:30Z'.
        deliverTo:
          type: object
          description: |
            The requested deliverTo from the communication's request.
          $ref: '#/components/schemas/DeliverTo'
        recipient:
          type: object
          description: |
            The actual value where the communication was delivered to.
          $ref: '#/components/schemas/Recipient'
        channel:
          type: array
          items:
            type: string
            enum:
              - Email
              - SMS
              - Print
        failure:
          type: object
          $ref: '#/components/schemas/Failure'
        content:
          type: object
          $ref: '#/components/schemas/Content'
        attachments:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Attachment'
        specialRequirements:
          type: object
          description: |
            An optional object which describes addition special requirements
            of the comm, such as Braille, Black and White and Audio.
          $ref: '#/components/schemas/SpecialRequirements'

    TriggeredCommunications:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/TriggeredCommunication'

    CommunicationRequest:
      type: object
      required:
        - templateManifest
        - friendlyDescription
        - deliverTo
      properties:
        templateManifest:
          type: object
          $ref: '#/components/schemas/TemplateManifest'
        friendlyDescription:
          type: string
        deliverTo:
          type: object
          $ref: '#/components/schemas/DeliverTo'
        templateData:
          type: object
          description: |
            Additional data to render communication's template in key-value JSON format.
        deliverAt:
          type: string
          description: |
            Schedule a communication to be sent at a specific time in ISO format
            such as '2011-12-03T10:15:30Z'.
        expireAt:
          type: string
          description: |
            Set this if you don't want a communication to be sent out if the
            platform cannot handle it until the expireAt value in ISO format
            such as '2011-12-03T10:15:30Z'.
        preferredChannels:
          type: array
          items:
            type: string
            enum:
              - Email
              - SMS
              - Print
        attachments:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Attachment'

    SendByAccountRequest:
      type: object
      required:
        - templateManifest
        - friendlyDescription
        - deliverTo
      properties:
        templateManifest:
          type: object
          $ref: '#/components/schemas/TemplateManifest'
        friendlyDescription:
          type: string
        deliverTo:
          type: object
          $ref: '#/components/schemas/AccountProfile'
        templateData:
          type: object
          description: |
            Additional data to render communication's template in key-value JSON format.
        deliverAt:
          type: string
          description: |
            Schedule a communication to be sent at a specific time in ISO format
            such as '2011-12-03T10:15:30Z'.
        expireAt:
          type: string
          description: |
            Set this if you don't want a communication to be sent out if the
            platform cannot handle it until the expireAt value in ISO format
            such as '2011-12-03T10:15:30Z'.
        preferredChannels:
          type: array
          items:
            type: string
            enum:
              - Email
              - SMS
              - Print
        attachments:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Attachment'
