// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`json-refs Should resolve complex recursive 1`] = `
{
  "#/components/parameters/id": {
    "description": "Single resource identifier",
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
      "type": "integer",
    },
  },
  "#/components/parameters/page": {
    "description": "Just single page parameter",
    "in": "query",
    "name": "page",
    "required": true,
    "schema": {
      "minimum": 1,
      "type": "integer",
    },
  },
  "#/components/parameters/queryId": {
    "description": "Single resource identifier",
    "in": "query",
    "name": "id",
    "required": true,
    "schema": {
      "type": "integer",
    },
  },
  "#/components/requestBodies/CommBatchRequest": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/NewCommBatch",
        },
      },
    },
    "description": "All data needed for new Comm Job creation",
    "required": true,
  },
  "#/components/requestBodies/PaymentExport": {
    "content": {
      "application/json": {
        "schema": {
          "additionalProperties": false,
          "properties": {
            "paymentType": {
              "enum": [
                "Cheque",
                "BACS",
              ],
              "type": "string",
            },
            "quarter": {
              "pattern": "^F[0-9]{2}Q[1-4]$",
              "type": "string",
            },
          },
          "required": [
            "paymentType",
            "quarter",
          ],
        },
      },
    },
    "description": "Payment Export parameters",
    "required": true,
  },
  "#/components/requestBodies/SessionRequest": {
    "content": {
      "application/json": {
        "schema": {
          "additionalProperties": false,
          "properties": {
            "token": {
              "type": "string",
            },
            "type": {
              "enum": [
                "oauth",
                "jwt",
              ],
            },
          },
          "required": [
            "token",
            "type",
          ],
        },
      },
    },
    "description": "Token to verify and create jwt session. Accepts google sign in id_token, or a valid jwt token.",
    "required": true,
  },
  "#/components/responses/AccountListItemsResponse": {
    "content": {
      "application/json": {
        "schema": {
          "allOf": [
            {
              "$ref": "schemes/components.yaml#/components/schemas/List",
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/AccountListItem",
                  },
                },
              },
              "required": [
                "data",
              ],
            },
          ],
        },
      },
    },
    "description": "A list of accounts with some data for each account",
  },
  "#/components/responses/ContactResponse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/Contact",
        },
      },
    },
    "description": "Return contract",
  },
  "#/components/responses/ContractsResponse": {
    "content": {
      "application/json": {
        "schema": {
          "items": {
            "$ref": "#/components/schemas/Contract",
          },
          "type": "array",
        },
      },
    },
    "description": "Return accounts active contracts",
  },
  "#/components/responses/CsvResponse": {
    "content": {
      "text/csv": {
        "schema": {
          "type": "string",
        },
      },
    },
    "description": "Csv File",
  },
  "#/components/responses/HtmlResponse": {
    "content": {
      "text/html": {
        "schema": {
          "type": "string",
        },
      },
    },
    "description": "Html File",
  },
  "#/components/responses/HttpErrorResponse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/HttpError",
        },
      },
    },
    "description": "Unknown Error",
  },
  "#/components/responses/ItemNotFoundResponse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/HttpError",
        },
      },
    },
    "description": "No item with that id has been found",
  },
  "#/components/responses/MeterReadsResponse": {
    "content": {
      "application/json": {
        "schema": {
          "items": {
            "$ref": "#/components/schemas/MeterRead",
          },
          "type": "array",
        },
      },
    },
    "description": "Return account",
  },
  "#/components/responses/SessionResponse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/Session",
        },
      },
    },
    "description": "JWT Session",
  },
  "#/components/responses/SuccessResponse": {
    "content": {
      "application/json": {
        "schema": {
          "additionalProperties": false,
          "properties": {
            "success": {
              "type": "boolean",
            },
          },
          "required": [
            "success",
          ],
        },
      },
    },
    "description": "OK",
  },
  "#/components/schemas/Account": {
    "additionalProperties": false,
    "properties": {
      "beneficiaryAccountNumber": {
        "type": "string",
      },
      "beneficiaryName": {
        "type": "string",
      },
      "beneficiarySortCode": {
        "type": "string",
      },
      "companyName": {
        "type": "string",
      },
      "companyRegNumber": {
        "type": "string",
      },
      "companyVatNumber": {
        "type": "string",
      },
      "contracts": {
        "items": {
          "$ref": "#/components/schemas/AccountContract",
        },
        "type": "array",
      },
      "endOn": {
        "format": "date-time",
        "type": "string",
      },
      "id": {
        "type": "number",
      },
      "paymentPlan": {
        "enum": [
          "Cheque",
          "BACS",
        ],
        "type": "string",
      },
      "paymentSuspended": {
        "type": "boolean",
      },
      "primaryContact": {
        "$ref": "#/components/schemas/Contact",
      },
      "primaryContactId": {
        "type": "number",
      },
      "secondaryContact": {
        "$ref": "#/components/schemas/Contact",
      },
      "secondaryContactId": {
        "type": "number",
      },
      "startOn": {
        "format": "date-time",
        "type": "string",
      },
      "state": {
        "$ref": "#/components/schemas/AccountStateType",
      },
      "tosReceived": {
        "type": "boolean",
      },
    },
    "required": [
      "id",
      "state",
      "paymentSuspended",
      "tosReceived",
    ],
    "type": "object",
  },
  "#/components/schemas/AccountContract": {
    "additionalProperties": false,
    "properties": {
      "confirmationOn": {
        "format": "date-time",
        "type": "string",
      },
      "contactId": {
        "type": "number",
      },
      "contractId": {
        "type": "number",
      },
      "createdAt": {
        "format": "date-time",
        "type": "string",
      },
      "expTariffCode": {
        "type": "string",
      },
      "exportSplit": {
        "type": "number",
      },
      "exportTariffId": {
        "type": "number",
      },
      "fullName": {
        "type": "string",
      },
      "genTariffCode": {
        "type": "string",
      },
      "generationSplit": {
        "type": "number",
      },
      "generationTariffId": {
        "type": "number",
      },
      "installationId": {
        "type": "number",
      },
      "schemeAccountReference": {
        "type": "string",
      },
      "schemeType": {
        "$ref": "#/components/schemas/SchemeType",
      },
      "title": {
        "type": "string",
      },
      "tosAgreed": {
        "type": "boolean",
      },
    },
    "required": [
      "contractId",
      "schemeAccountReference",
      "installationId",
      "schemeType",
    ],
    "type": "object",
  },
  "#/components/schemas/AccountLevelisation": {
    "allOf": [
      {
        "$ref": "#/components/schemas/AccountLevelisationList",
      },
      {
        "properties": {
          "exportPeriods": {
            "items": {
              "$ref": "#/components/schemas/PeriodWithCalculatedAmount",
            },
          },
          "generationPeriods": {
            "items": {
              "$ref": "#/components/schemas/PeriodWithCalculatedAmount",
            },
          },
        },
      },
    ],
  },
  "#/components/schemas/AccountLevelisationList": {
    "properties": {
      "accountId": {
        "type": "number",
      },
      "cfrFitId": {
        "type": "string",
      },
      "exportEndReadOn": {
        "format": "date-time",
        "type": "string",
      },
      "exportEndReadValue": {
        "type": "number",
      },
      "exportEnergy": {
        "type": "number",
      },
      "exportPayment": {
        "$ref": "components.yaml#/components/schemas/Pennies",
      },
      "exportPercentageSplit": {
        "type": "number",
      },
      "exportStartReadOn": {
        "format": "date-time",
        "type": "string",
      },
      "exportStartReadValue": {
        "type": "number",
      },
      "generationEndReadOn": {
        "format": "date-time",
        "type": "string",
      },
      "generationEndReadValue": {
        "type": "number",
      },
      "generationEnergy": {
        "type": "number",
      },
      "generationPayment": {
        "$ref": "components.yaml#/components/schemas/Pennies",
      },
      "generationPercentageSplit": {
        "type": "number",
      },
      "generationStartReadOn": {
        "format": "date-time",
        "type": "string",
      },
      "generationStartReadValue": {
        "type": "number",
      },
      "id": {
        "type": "number",
      },
      "installationId": {
        "type": "number",
      },
      "isAccepted": {
        "type": "boolean",
      },
      "levelisationId": {
        "type": "number",
      },
      "state": {
        "$ref": "#/components/schemas/AccountLevelisationState",
      },
      "totalPayment": {
        "$ref": "components.yaml#/components/schemas/Pennies",
      },
      "vatPayment": {
        "$ref": "components.yaml#/components/schemas/Pennies",
      },
    },
    "required": [
      "id",
      "levelisationId",
      "accountId",
      "installationId",
      "state",
      "cfrFitId",
      "isAccepted",
    ],
  },
  "#/components/schemas/AccountLevelisationSave": {
    "properties": {
      "id": {
        "type": "number",
      },
      "isAccepted": {
        "type": "boolean",
      },
    },
    "required": [
      "id",
      "isAccepted",
    ],
  },
  "#/components/schemas/AccountLevelisationState": {
    "enum": [
      "Pending",
      "Done",
    ],
  },
  "#/components/schemas/AccountListItem": {
    "properties": {
      "address": {
        "type": "string",
      },
      "email": {
        "type": "string",
      },
      "firstName": {
        "type": "string",
      },
      "fitIds": {
        "$ref": "schemes/components.yaml#/components/schemas/ListOfStrings",
      },
      "id": {
        "type": "integer",
      },
      "lastName": {
        "type": "string",
      },
      "state": {
        "$ref": "#/components/schemas/AccountStateType",
      },
    },
    "required": [
      "id",
      "firstName",
      "lastName",
    ],
  },
  "#/components/schemas/AccountStateType": {
    "enum": [
      "Active",
      "Pending",
      "Dispute",
      "Closed",
    ],
    "type": "string",
  },
  "#/components/schemas/Address": {
    "additionalProperties": false,
    "properties": {
      "company": {
        "type": "string",
      },
      "contactName": {
        "type": "string",
      },
      "country": {
        "type": "string",
      },
      "county": {
        "type": "string",
      },
      "line1": {
        "type": "string",
      },
      "line2": {
        "type": "string",
      },
      "line3": {
        "type": "string",
      },
      "postcode": {
        "type": "string",
      },
      "town": {
        "type": "string",
      },
    },
    "required": [
      "country",
      "postcode",
    ],
    "type": "object",
  },
  "#/components/schemas/BulkAccountLevelisationSave": {
    "properties": {
      "isAccepted": {
        "type": "boolean",
      },
    },
    "required": [
      "isAccepted",
    ],
  },
  "#/components/schemas/CommBatch": {
    "additionalProperties": false,
    "properties": {
      "createdAt": {
        "format": "date-time",
        "type": "string",
      },
      "filename": {
        "type": "string",
      },
      "id": {
        "type": "integer",
      },
      "items": {
        "items": {
          "additionalProperties": false,
          "properties": {
            "commBatchId": {
              "type": "number",
            },
            "commId": {
              "type": "string",
            },
            "contactAddress": {
              "type": "object",
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
            },
            "error": {
              "type": "string",
            },
            "id": {
              "type": "integer",
            },
            "status": {
              "$ref": "#/components/schemas/CommBatchItemStatus",
            },
            "templateParams": {
              "type": "object",
            },
            "updatedAt": {
              "format": "date-time",
              "type": "string",
            },
          },
          "required": [
            "id",
            "status",
            "createdAt",
            "commBatchId",
            "templateParams",
            "contactAddress",
          ],
          "type": "object",
        },
        "type": "array",
      },
      "itemsDelivered": {
        "type": "number",
      },
      "itemsExpired": {
        "type": "number",
      },
      "itemsFailed": {
        "type": "number",
      },
      "itemsPending": {
        "type": "number",
      },
      "itemsScheduled": {
        "type": "number",
      },
      "type": {
        "$ref": "#/components/schemas/CommBatchType",
      },
    },
    "required": [
      "id",
      "type",
      "createdAt",
      "filename",
      "items",
    ],
  },
  "#/components/schemas/CommBatchItemStatus": {
    "enum": [
      "Scheduled",
      "Pending",
      "Delivered",
      "Expired",
      "Failed",
    ],
    "type": "string",
  },
  "#/components/schemas/CommBatchList": {
    "additionalProperties": false,
    "properties": {
      "createdAt": {
        "format": "date-time",
        "type": "string",
      },
      "filename": {
        "type": "string",
      },
      "id": {
        "type": "integer",
      },
      "itemsDelivered": {
        "type": "number",
      },
      "itemsExpired": {
        "type": "number",
      },
      "itemsFailed": {
        "type": "number",
      },
      "itemsPending": {
        "type": "number",
      },
      "itemsScheduled": {
        "type": "number",
      },
      "type": {
        "$ref": "#/components/schemas/CommBatchType",
      },
      "updatedAt": {
        "format": "date-time",
        "type": "string",
      },
    },
    "required": [
      "id",
      "type",
      "filename",
      "createdAt",
    ],
  },
  "#/components/schemas/CommBatchType": {
    "enum": [
      "FITMeterInspectionDue",
      "Statement",
    ],
    "type": "string",
  },
  "#/components/schemas/CommContactAddress": {
    "oneOf": [
      {
        "$ref": "#/components/schemas/CommsEmailAddress",
      },
      {
        "$ref": "#/components/schemas/CommsPostalAddress",
      },
      {
        "$ref": "#/components/schemas/CommsPhoneNumber",
      },
    ],
  },
  "#/components/schemas/CommsEmailAddress": {
    "additionalProperties": false,
    "properties": {
      "emailAddress": {
        "pattern": "@",
        "type": "string",
      },
    },
    "required": [
      "emailAddress",
    ],
    "type": "object",
  },
  "#/components/schemas/CommsPhoneNumber": {
    "additionalProperties": false,
    "properties": {
      "phoneNumber": {
        "pattern": "[0-9 ]+",
        "type": "string",
      },
    },
    "required": [
      "phoneNumber",
    ],
    "type": "object",
  },
  "#/components/schemas/CommsPostalAddress": {
    "additionalProperties": false,
    "properties": {
      "postalAddress": {
        "$ref": "#/components/schemas/Address",
      },
    },
    "required": [
      "postalAddress",
    ],
  },
  "#/components/schemas/Contact": {
    "additionalProperties": false,
    "properties": {
      "addressLine1": {
        "type": "string",
      },
      "addressLine2": {
        "type": "string",
      },
      "addressLine3": {
        "type": "string",
      },
      "city": {
        "type": "string",
      },
      "country": {
        "type": "string",
      },
      "county": {
        "type": "string",
      },
      "email": {
        "type": "string",
      },
      "fullName": {
        "type": "string",
      },
      "id": {
        "type": "number",
      },
      "phone": {
        "type": "string",
      },
      "postCode": {
        "type": "string",
      },
      "title": {
        "type": "string",
      },
    },
    "required": [
      "id",
    ],
    "type": "object",
  },
  "#/components/schemas/ExportType": {
    "enum": [
      "PPA",
      "Off Grid",
      "Metered Export",
      "Deemed",
    ],
    "type": "string",
  },
  "#/components/schemas/HttpError": {
    "additionalProperties": false,
    "properties": {
      "message": {
        "type": "string",
      },
    },
    "required": [
      "message",
    ],
  },
  "#/components/schemas/Installation": {
    "additionalProperties": false,
    "properties": {
      "accountId": {
        "type": "number",
      },
      "address": {
        "$ref": "#/components/schemas/Address",
      },
      "addressId": {
        "type": "number",
      },
      "batteryInstallationDateOn": {
        "type": "string",
      },
      "commissionedOn": {
        "format": "date-time",
        "type": "string",
      },
      "confirmationOn": {
        "format": "date-time",
        "type": "string",
      },
      "contracts": {
        "items": {
          "$ref": "#/components/schemas/AccountContract",
        },
        "type": "array",
      },
      "createdAt": {
        "format": "date-time",
        "type": "string",
      },
      "dateGrantRepaid": {
        "format": "date-time",
        "type": "string",
      },
      "decommissionedOn": {
        "format": "date-time",
        "type": "string",
      },
      "dncReference": {
        "type": "number",
      },
      "eligibilityEndOn": {
        "format": "date-time",
        "type": "string",
      },
      "eligibilityStartOn": {
        "format": "date-time",
        "type": "string",
      },
      "epcDate": {
        "format": "date-time",
        "type": "string",
      },
      "epcNumber": {
        "type": "number",
      },
      "epcRate": {
        "type": "string",
      },
      "exportMpan": {
        "type": "string",
      },
      "exportPercentageSplit": {
        "type": "number",
      },
      "exportTariffId": {
        "type": "number",
      },
      "exportType": {
        "$ref": "#/components/schemas/ExportType",
      },
      "generationPercentageSplit": {
        "type": "number",
      },
      "generationTariffId": {
        "type": "number",
      },
      "hasBatteryStorage": {
        "type": "string",
      },
      "id": {
        "type": "number",
      },
      "inspectedOn": {
        "format": "date-time",
        "type": "string",
      },
      "installedOn": {
        "format": "date-time",
        "type": "string",
      },
      "legacyFitDbId": {
        "type": "string",
      },
      "maxCapacity": {
        "type": "number",
      },
      "mcsReference": {
        "type": "string",
      },
      "meters": {
        "items": {
          "$ref": "#/components/schemas/InstallationMeter",
        },
        "type": "array",
      },
      "name": {
        "type": "string",
      },
      "nameOfGrant": {
        "type": "string",
      },
      "propertyType": {
        "$ref": "#/components/schemas/PropertyType",
      },
      "reverifiedOn": {
        "format": "date-time",
        "type": "string",
      },
      "roofitReference": {
        "type": "string",
      },
      "scheme": {
        "$ref": "#/components/schemas/SchemeType",
      },
      "schemeReference": {
        "type": "string",
      },
      "sourceSystemId": {
        "type": "number",
      },
      "supplyMpan": {
        "type": "string",
      },
      "switchedFrom": {
        "type": "string",
      },
      "switchedTo": {
        "type": "string",
      },
      "tariffRates": {
        "items": {
          "$ref": "#/components/schemas/TariffRate",
        },
        "type": "array",
      },
      "technologyType": {
        "$ref": "#/components/schemas/TechnologyType",
      },
      "termsAndConditionsAgreed": {
        "type": "boolean",
      },
      "type": {
        "$ref": "#/components/schemas/InstallationType",
      },
      "updatedAt": {
        "format": "date-time",
        "type": "string",
      },
      "valueOfGrant": {
        "type": "number",
      },
      "verifiedOn": {
        "format": "date-time",
        "type": "string",
      },
    },
    "required": [
      "id",
      "type",
      "installedOn",
      "propertyType",
      "createdAt",
    ],
    "type": "object",
  },
  "#/components/schemas/InstallationMeter": {
    "additionalProperties": false,
    "properties": {
      "addedToInstallationAt": {
        "format": "date-time",
        "type": "string",
      },
      "distributionRegion": {
        "type": "string",
      },
      "endOn": {
        "format": "date-time",
        "type": "string",
      },
      "gsp": {
        "type": "string",
      },
      "id": {
        "type": "number",
      },
      "installationId": {
        "type": "number",
      },
      "make": {
        "type": "string",
      },
      "meterId": {
        "type": "number",
      },
      "model": {
        "type": "string",
      },
      "mpan": {
        "type": "string",
      },
      "msn": {
        "type": "string",
      },
      "shared": {
        "type": "boolean",
      },
      "startOn": {
        "format": "date-time",
        "type": "string",
      },
      "type": {
        "$ref": "#/components/schemas/MeterType",
      },
      "updatedAt": {
        "format": "date-time",
        "type": "string",
      },
    },
    "required": [
      "id",
      "meterId",
      "type",
      "msn",
      "shared",
      "addedToInstallationAt",
    ],
    "type": "object",
  },
  "#/components/schemas/InstallationType": {
    "enum": [
      "None",
      "Extension of an existing FiT-accredited installation",
      "Standalone",
      "New build",
      "Retrofit",
    ],
    "type": "string",
  },
  "#/components/schemas/Levelisation": {
    "allOf": [
      {
        "$ref": "#/components/schemas/LevelisationList",
      },
      {
        "properties": {
          "doneCount": {
            "type": "number",
          },
          "pendingCount": {
            "type": "number",
          },
          "totalCount": {
            "type": "number",
          },
          "totalDeemedExportEnergy": {
            "type": "number",
          },
          "totalDeemedExportPayment": {
            "$ref": "components.yaml#/components/schemas/Pennies",
          },
          "totalExportPayment": {
            "$ref": "components.yaml#/components/schemas/Pennies",
          },
          "totalGenerationPayment": {
            "$ref": "components.yaml#/components/schemas/Pennies",
          },
          "totalMeteredExportEnergy": {
            "type": "number",
          },
          "totalMeteredExportPayment": {
            "$ref": "components.yaml#/components/schemas/Pennies",
          },
        },
      },
    ],
  },
  "#/components/schemas/LevelisationCreate": {
    "properties": {
      "quarter": {
        "$ref": "#/components/schemas/LevelisationQuarter",
      },
    },
    "required": [
      "quarter",
    ],
  },
  "#/components/schemas/LevelisationList": {
    "properties": {
      "endOn": {
        "format": "date-time",
        "type": "string",
      },
      "id": {
        "type": "number",
      },
      "isAccepted": {
        "type": "boolean",
      },
      "quarter": {
        "$ref": "#/components/schemas/LevelisationQuarter",
      },
      "startOn": {
        "format": "date-time",
        "type": "string",
      },
    },
    "required": [
      "id",
      "quarter",
      "isAccepted",
    ],
  },
  "#/components/schemas/LevelisationMeterRead": {
    "properties": {
      "dateOn": {
        "format": "date-time",
        "type": "string",
      },
      "value": {
        "type": "number",
      },
    },
    "required": [
      "dateOn",
      "value",
    ],
  },
  "#/components/schemas/LevelisationQuarter": {
    "pattern": "^F\\d+Q[1234]$",
    "type": "string",
  },
  "#/components/schemas/LevelisationRate": {
    "properties": {
      "endOn": {
        "format": "date-time",
        "type": "string",
      },
      "rate": {
        "type": "number",
      },
      "startOn": {
        "format": "date-time",
        "type": "string",
      },
    },
    "required": [
      "startOn",
      "endOn",
      "rate",
    ],
  },
  "#/components/schemas/LevelisationSave": {
    "properties": {
      "isAccepted": {
        "type": "boolean",
      },
      "isRestarted": {
        "type": "boolean",
      },
    },
    "required": [
      "isAccepted",
    ],
  },
  "#/components/schemas/ListOfIds": {
    "items": {
      "type": "integer",
    },
    "type": "array",
  },
  "#/components/schemas/Meter": {
    "additionalProperties": false,
    "properties": {
      "createdAt": {
        "type": "string",
      },
      "distributionRegion": {
        "type": "string",
      },
      "gsp": {
        "type": "string",
      },
      "id": {
        "type": "number",
      },
      "isExport": {
        "type": "boolean",
      },
      "make": {
        "type": "string",
      },
      "model": {
        "type": "string",
      },
      "mpan": {
        "type": "string",
      },
      "msn": {
        "type": "string",
      },
      "shared": {
        "type": "boolean",
      },
      "updatedAt": {
        "type": "string",
      },
    },
    "required": [
      "id",
      "msn",
      "isExport",
      "createdAt",
    ],
    "type": "object",
  },
  "#/components/schemas/MeterRead": {
    "additionalProperties": false,
    "properties": {
      "createdAt": {
        "format": "date-time",
        "type": "string",
      },
      "dateOn": {
        "format": "date-time",
        "type": "string",
      },
      "id": {
        "type": "number",
      },
      "meterId": {
        "type": "number",
      },
      "reason": {
        "type": "string",
      },
      "sourceSystemId": {
        "type": "number",
      },
      "type": {
        "$ref": "#/components/schemas/MeterReadType",
      },
      "updatedAt": {
        "format": "date-time",
        "type": "string",
      },
      "value": {
        "type": "number",
      },
    },
    "required": [
      "id",
      "meterId",
      "dateOn",
      "value",
      "type",
      "createdAt",
    ],
    "type": "object",
  },
  "#/components/schemas/MeterReadCheck": {
    "properties": {
      "accountId": {
        "type": "number",
      },
      "cfrFitId": {
        "type": "string",
      },
      "createdAt": {
        "format": "date-time",
        "type": "string",
      },
      "dateOn": {
        "format": "date-time",
        "type": "string",
      },
      "id": {
        "type": "number",
      },
      "isAccepted": {
        "type": "boolean",
      },
      "reason": {
        "type": "string",
      },
      "tolerance": {
        "$ref": "#/components/schemas/MeterReadTolerance",
      },
      "type": {
        "enum": [
          "Closing",
          "Meter Verification",
          "Opening",
          "Quarterly",
        ],
      },
      "value": {
        "type": "number",
      },
    },
    "required": [
      "id",
      "accountId",
      "cfrFitId",
      "dateOn",
      "value",
      "type",
      "createdAt",
      "isAccepted",
    ],
  },
  "#/components/schemas/MeterReadCheckSave": {
    "properties": {
      "isAccepted": {
        "type": "boolean",
      },
    },
    "required": [
      "isAccepted",
    ],
  },
  "#/components/schemas/MeterReadTolerance": {
    "properties": {
      "error": {
        "type": "string",
      },
      "expected": {
        "$ref": "#/components/schemas/MeterReadToleranceRead",
      },
      "previousRead": {
        "$ref": "#/components/schemas/MeterReadToleranceRead",
      },
    },
  },
  "#/components/schemas/MeterReadToleranceRead": {
    "properties": {
      "dateOn": {
        "format": "date-time",
        "type": "string",
      },
      "value": {
        "type": "number",
      },
    },
    "required": [
      "dateOn",
      "value",
    ],
  },
  "#/components/schemas/MeterReadType": {
    "enum": [
      "Closing",
      "Meter Verification",
      "Opening",
      "Quarterly",
    ],
    "type": "string",
  },
  "#/components/schemas/MeterType": {
    "enum": [
      "Export",
      "Generation",
    ],
    "type": "string",
  },
  "#/components/schemas/NewCommBatch": {
    "discriminator": {
      "propertyName": "type",
    },
    "oneOf": [
      {
        "$ref": "#/components/schemas/NewCommBatchFITMeterInspectionDue",
      },
      {
        "$ref": "#/components/schemas/NewCommBatchStatement",
      },
    ],
  },
  "#/components/schemas/NewCommBatchFITMeterInspectionDue": {
    "additionalProperties": true,
    "properties": {
      "filename": {
        "type": "string",
      },
      "items": {
        "items": {
          "additionalProperties": false,
          "properties": {
            "contactAddress": {
              "$ref": "#/components/schemas/CommContactAddress",
            },
            "templateParams": {
              "additionalProperties": false,
              "properties": {
                "fitId": {
                  "type": "string",
                },
              },
              "required": [
                "fitId",
              ],
              "type": "object",
            },
          },
          "required": [
            "templateParams",
          ],
          "type": "object",
        },
        "type": "array",
      },
      "type": {
        "enum": [
          "FITMeterInspectionDue",
        ],
        "type": "string",
      },
    },
    "required": [
      "type",
      "filename",
      "items",
    ],
    "type": "object",
  },
  "#/components/schemas/NewCommBatchStatement": {
    "additionalProperties": true,
    "properties": {
      "filename": {
        "type": "string",
      },
      "items": {
        "items": {
          "additionalProperties": false,
          "properties": {
            "contactAddress": {
              "$ref": "#/components/schemas/CommContactAddress",
            },
            "templateParams": {
              "additionalProperties": false,
              "properties": {
                "accountNumber": {
                  "type": "string",
                },
                "emailAddress": {
                  "pattern": "@",
                  "type": "string",
                },
                "payment": {
                  "additionalProperties": false,
                  "properties": {
                    "deemedExport": {
                      "additionalProperties": false,
                      "properties": {
                        "endDate": {
                          "type": "string",
                        },
                        "value": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "endDate": {
                      "type": "string",
                    },
                    "endDateLong": {
                      "type": "string",
                    },
                    "export": {
                      "additionalProperties": false,
                      "properties": {
                        "endDate": {
                          "type": "string",
                        },
                        "value": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "generation": {
                      "additionalProperties": false,
                      "properties": {
                        "endDate": {
                          "type": "string",
                        },
                        "value": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "startDate": {
                      "type": "string",
                    },
                    "startDateLong": {
                      "type": "string",
                    },
                    "total": {
                      "type": "string",
                    },
                    "vat": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "startDate",
                    "endDate",
                    "total",
                  ],
                  "type": "object",
                },
                "rates": {
                  "additionalProperties": false,
                  "properties": {
                    "expPeriod": {
                      "type": "string",
                    },
                    "export": {
                      "type": "string",
                    },
                    "exportOld": {
                      "type": "string",
                    },
                    "from": {
                      "type": "string",
                    },
                    "genPeriod": {
                      "type": "string",
                    },
                    "generation": {
                      "type": "string",
                    },
                    "generationOld": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "reads": {
                  "additionalProperties": false,
                  "properties": {
                    "exportClosing": {
                      "additionalProperties": false,
                      "properties": {
                        "date": {
                          "type": "string",
                        },
                        "value": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "exportOpening": {
                      "additionalProperties": false,
                      "properties": {
                        "date": {
                          "type": "string",
                        },
                        "value": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "generationClosing": {
                      "additionalProperties": false,
                      "properties": {
                        "date": {
                          "type": "string",
                        },
                        "value": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "generationOpening": {
                      "additionalProperties": false,
                      "properties": {
                        "date": {
                          "type": "string",
                        },
                        "value": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "percentageSplit": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
              "required": [
                "accountNumber",
                "payment",
              ],
              "type": "object",
            },
          },
          "required": [
            "templateParams",
          ],
          "type": "object",
        },
        "type": "array",
      },
      "type": {
        "enum": [
          "Statement",
        ],
        "type": "string",
      },
    },
    "required": [
      "type",
      "filename",
      "items",
    ],
    "type": "object",
  },
  "#/components/schemas/Payment": {
    "additionalProperties": false,
    "properties": {
      "accountId": {
        "type": "number",
      },
      "amount": {
        "type": "number",
      },
      "comment": {
        "type": "string",
      },
      "createdAt": {
        "format": "date-time",
        "type": "string",
      },
      "deemedTotalOutput": {
        "type": "number",
      },
      "expTariffCode": {
        "type": "string",
      },
      "exportMeterEndReadDate": {
        "format": "date-time",
        "type": "string",
      },
      "exportMeterEndReadId": {
        "type": "number",
      },
      "exportMeterEndReadValue": {
        "type": "number",
      },
      "exportMeterId": {
        "type": "number",
      },
      "exportMeterStartReadDate": {
        "format": "date-time",
        "type": "string",
      },
      "exportMeterStartReadId": {
        "type": "number",
      },
      "exportMeterStartReadValue": {
        "type": "number",
      },
      "exportTotalOutput": {
        "type": "number",
      },
      "fitReference": {
        "type": "string",
      },
      "genMeterEndReadDate": {
        "format": "date-time",
        "type": "string",
      },
      "genMeterEndReadId": {
        "type": "number",
      },
      "genMeterEndReadValue": {
        "type": "number",
      },
      "genMeterId": {
        "type": "number",
      },
      "genMeterStartReadDate": {
        "format": "date-time",
        "type": "string",
      },
      "genMeterStartReadId": {
        "type": "number",
      },
      "genMeterStartReadValue": {
        "type": "number",
      },
      "genMeterTotalOutput": {
        "type": "number",
      },
      "genTariffCode": {
        "type": "string",
      },
      "id": {
        "type": "number",
      },
      "isCompany": {
        "type": "boolean",
      },
      "levelisationReference": {
        "type": "string",
      },
      "periods": {
        "$ref": "#/components/schemas/PaymentPeriods",
      },
      "sentAt": {
        "format": "date-time",
        "type": "string",
      },
      "type": {
        "$ref": "#/components/schemas/PaymentType",
      },
    },
    "required": [
      "id",
      "accountId",
      "amount",
      "type",
      "genMeterId",
      "fitReference",
    ],
    "type": "object",
  },
  "#/components/schemas/PaymentPeriods": {
    "properties": {
      "deemed": {
        "items": {
          "$ref": "#/components/schemas/Period",
        },
        "type": "array",
      },
      "export": {
        "items": {
          "$ref": "#/components/schemas/Period",
        },
        "type": "array",
      },
      "generation": {
        "items": {
          "$ref": "#/components/schemas/Period",
        },
        "type": "array",
      },
    },
    "type": "object",
  },
  "#/components/schemas/PaymentType": {
    "enum": [
      "Levelisation",
    ],
    "type": "string",
  },
  "#/components/schemas/Period": {
    "additionalProperties": false,
    "properties": {
      "amount": {
        "type": "string",
      },
      "end": {
        "$ref": "#/components/schemas/SimpleMeterRead",
      },
      "energy": {
        "type": "number",
      },
      "percentageSplit": {
        "type": "number",
      },
      "rate": {
        "type": "number",
      },
      "start": {
        "$ref": "#/components/schemas/SimpleMeterRead",
      },
    },
    "required": [
      "start",
      "end",
      "rate",
      "amount",
    ],
    "type": "object",
  },
  "#/components/schemas/PeriodWithCalculatedAmount": {
    "properties": {
      "amount": {
        "type": "string",
      },
      "end": {
        "$ref": "#/components/schemas/LevelisationMeterRead",
      },
      "energy": {
        "type": "number",
      },
      "percentageSplit": {
        "type": "number",
      },
      "rate": {
        "$ref": "#/components/schemas/LevelisationRate",
      },
      "start": {
        "$ref": "#/components/schemas/LevelisationMeterRead",
      },
    },
    "requiered": [
      "start",
      "end",
      "rate",
      "percentage",
      "energy",
      "amount",
    ],
  },
  "#/components/schemas/PropertyType": {
    "enum": [
      "Other",
      "School/Education",
      "Not for profit",
      "Industrial",
      "Farm",
      "Commercial",
      "Domestic",
    ],
    "type": "string",
  },
  "#/components/schemas/SchemeType": {
    "enum": [
      "FIT",
      "SEG",
    ],
    "type": "string",
  },
  "#/components/schemas/Session": {
    "properties": {
      "expiresAt": {
        "format": "date-time",
        "type": "string",
      },
      "jwt": {
        "type": "string",
      },
      "user": {
        "properties": {
          "avatar": {
            "type": "string",
          },
          "email": {
            "type": "string",
          },
          "fullName": {
            "type": "string",
          },
          "scopes": {
            "items": {
              "type": "string",
            },
          },
        },
        "required": [
          "email",
        ],
      },
    },
    "required": [
      "jwt",
      "user",
    ],
  },
  "#/components/schemas/SimpleMeterRead": {
    "additionalProperties": false,
    "properties": {
      "dateOn": {
        "format": "date-time",
        "type": "string",
      },
      "value": {
        "type": "number",
      },
    },
    "required": [
      "dateOn",
      "value",
    ],
    "type": "object",
  },
  "#/components/schemas/TariffRate": {
    "additionalProperties": false,
    "properties": {
      "endOn": {
        "format": "date-time",
        "type": "string",
      },
      "rate": {
        "type": "number",
      },
      "startOn": {
        "format": "date-time",
        "type": "string",
      },
      "tariffCode": {
        "type": "string",
      },
      "tariffId": {
        "type": "number",
      },
      "tariffType": {
        "$ref": "#/components/schemas/TariffType",
      },
    },
    "required": [
      "tariffId",
      "tariffCode",
      "tariffType",
      "startOn",
      "rate",
    ],
    "type": "object",
  },
  "#/components/schemas/TariffType": {
    "enum": [
      "Export",
      "Generation",
      "SEG",
    ],
    "type": "string",
  },
  "#/components/schemas/TechnologyType": {
    "enum": [
      "CHP",
      "AD",
      "W",
      "H",
      "PV",
    ],
    "type": "string",
  },
  "components.yaml": {
    "components": {
      "parameters": {
        "filter": {
          "description": "React admin filter object. It should contain different filters, for example "q" is for a search.",
          "example": "{ "q": "test" }",
          "in": "query",
          "name": "filter",
          "schema": {
            "default": {},
            "type": "object",
          },
        },
        "ids": {
          "description": "Retern individual records from the list, matching the specified ids",
          "in": "query",
          "name": "ids",
          "schema": {
            "items": {
              "type": "integer",
            },
            "type": "array",
          },
        },
        "pagination": {
          "description": "React admin pagination object",
          "examples": {
            "customPerPage": {
              "summary": "Page with custom page size",
              "value": {
                "page": 1,
                "perPage": 200,
              },
            },
            "firstPage": {
              "summary": "First page",
              "value": {
                "page": 1,
              },
            },
            "secondPage": {
              "summary": "Second page",
              "value": {
                "page": 2,
              },
            },
          },
          "in": "query",
          "name": "pagination",
          "schema": {
            "additionalProperties": false,
            "default": {
              "page": 1,
              "perPage": 100,
            },
            "properties": {
              "page": {
                "default": 1,
                "minimum": 1,
                "type": "integer",
              },
              "perPage": {
                "default": 100,
                "maximum": 1000,
                "minimum": 1,
                "type": "integer",
              },
            },
            "type": "object",
          },
        },
        "sort": {
          "description": "React admin sort object",
          "example": "{ "field": "createdAt", "order": "ASC" }",
          "in": "query",
          "name": "sort",
          "schema": {
            "additionalProperties": false,
            "default": {},
            "properties": {
              "field": {
                "type": "string",
              },
              "order": {
                "default": "ASC",
                "enum": [
                  "ASC",
                  "DESC",
                ],
              },
            },
            "type": "object",
          },
        },
        "traceToken": {
          "description": "An optional trace token to be passed to the service and used for logging",
          "in": "header",
          "name": "X-Trace-Token",
          "schema": {
            "format": "uuid",
            "type": "string",
          },
        },
      },
      "responses": {
        "ListOfIdsResonse": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIds",
              },
            },
          },
          "description": "List of Ids that were affected",
        },
        "TextResponse": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
              },
            },
          },
          "description": "Yaml File",
        },
      },
      "schemas": {
        "BulkDelete": {
          "properties": {
            "ids": {
              "$ref": "#/components/schemas/ListOfIds",
            },
          },
          "required": [
            "ids",
          ],
        },
        "BulkUpdate": {
          "properties": {
            "ids": {
              "$ref": "#/components/schemas/ListOfIds",
            },
          },
          "required": [
            "ids",
          ],
        },
        "List": {
          "properties": {
            "total": {
              "type": "integer",
            },
          },
          "required": [
            "total",
          ],
        },
        "ListOfIds": {
          "items": {
            "type": "integer",
          },
          "type": "array",
        },
        "ListOfStrings": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
        "Pennies": {
          "description": "Payment amount in pennies. (140 represnets £1.40)",
          "type": "number",
        },
      },
    },
  },
  "components.yaml#/components/schemas/BulkDelete": {
    "properties": {
      "ids": {
        "$ref": "#/components/schemas/ListOfIds",
      },
    },
    "required": [
      "ids",
    ],
  },
  "components.yaml#/components/schemas/BulkUpdate": {
    "properties": {
      "ids": {
        "$ref": "#/components/schemas/ListOfIds",
      },
    },
    "required": [
      "ids",
    ],
  },
  "components.yaml#/components/schemas/List": {
    "properties": {
      "total": {
        "type": "integer",
      },
    },
    "required": [
      "total",
    ],
  },
  "components.yaml#/components/schemas/Pennies": {
    "description": "Payment amount in pennies. (140 represnets £1.40)",
    "type": "number",
  },
  "schemes/components.yaml": {
    "components": {
      "parameters": {
        "filter": {
          "description": "React admin filter object. It should contain different filters, for example "q" is for a search.",
          "example": "{ "q": "test" }",
          "in": "query",
          "name": "filter",
          "schema": {
            "default": {},
            "type": "object",
          },
        },
        "ids": {
          "description": "Retern individual records from the list, matching the specified ids",
          "in": "query",
          "name": "ids",
          "schema": {
            "items": {
              "type": "integer",
            },
            "type": "array",
          },
        },
        "pagination": {
          "description": "React admin pagination object",
          "examples": {
            "customPerPage": {
              "summary": "Page with custom page size",
              "value": {
                "page": 1,
                "perPage": 200,
              },
            },
            "firstPage": {
              "summary": "First page",
              "value": {
                "page": 1,
              },
            },
            "secondPage": {
              "summary": "Second page",
              "value": {
                "page": 2,
              },
            },
          },
          "in": "query",
          "name": "pagination",
          "schema": {
            "additionalProperties": false,
            "default": {
              "page": 1,
              "perPage": 100,
            },
            "properties": {
              "page": {
                "default": 1,
                "minimum": 1,
                "type": "integer",
              },
              "perPage": {
                "default": 100,
                "maximum": 1000,
                "minimum": 1,
                "type": "integer",
              },
            },
            "type": "object",
          },
        },
        "sort": {
          "description": "React admin sort object",
          "example": "{ "field": "createdAt", "order": "ASC" }",
          "in": "query",
          "name": "sort",
          "schema": {
            "additionalProperties": false,
            "default": {},
            "properties": {
              "field": {
                "type": "string",
              },
              "order": {
                "default": "ASC",
                "enum": [
                  "ASC",
                  "DESC",
                ],
              },
            },
            "type": "object",
          },
        },
        "traceToken": {
          "description": "An optional trace token to be passed to the service and used for logging",
          "in": "header",
          "name": "X-Trace-Token",
          "schema": {
            "format": "uuid",
            "type": "string",
          },
        },
      },
      "responses": {
        "ListOfIdsResonse": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIds",
              },
            },
          },
          "description": "List of Ids that were affected",
        },
        "TextResponse": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
              },
            },
          },
          "description": "Yaml File",
        },
      },
      "schemas": {
        "BulkDelete": {
          "properties": {
            "ids": {
              "$ref": "#/components/schemas/ListOfIds",
            },
          },
          "required": [
            "ids",
          ],
        },
        "BulkUpdate": {
          "properties": {
            "ids": {
              "$ref": "#/components/schemas/ListOfIds",
            },
          },
          "required": [
            "ids",
          ],
        },
        "List": {
          "properties": {
            "total": {
              "type": "integer",
            },
          },
          "required": [
            "total",
          ],
        },
        "ListOfIds": {
          "items": {
            "type": "integer",
          },
          "type": "array",
        },
        "ListOfStrings": {
          "items": {
            "type": "string",
          },
          "type": "array",
        },
        "Pennies": {
          "description": "Payment amount in pennies. (140 represnets £1.40)",
          "type": "number",
        },
      },
    },
  },
  "schemes/components.yaml#/components/parameters/filter": {
    "description": "React admin filter object. It should contain different filters, for example "q" is for a search.",
    "example": "{ "q": "test" }",
    "in": "query",
    "name": "filter",
    "schema": {
      "default": {},
      "type": "object",
    },
  },
  "schemes/components.yaml#/components/parameters/ids": {
    "description": "Retern individual records from the list, matching the specified ids",
    "in": "query",
    "name": "ids",
    "schema": {
      "items": {
        "type": "integer",
      },
      "type": "array",
    },
  },
  "schemes/components.yaml#/components/parameters/pagination": {
    "description": "React admin pagination object",
    "examples": {
      "customPerPage": {
        "summary": "Page with custom page size",
        "value": {
          "page": 1,
          "perPage": 200,
        },
      },
      "firstPage": {
        "summary": "First page",
        "value": {
          "page": 1,
        },
      },
      "secondPage": {
        "summary": "Second page",
        "value": {
          "page": 2,
        },
      },
    },
    "in": "query",
    "name": "pagination",
    "schema": {
      "additionalProperties": false,
      "default": {
        "page": 1,
        "perPage": 100,
      },
      "properties": {
        "page": {
          "default": 1,
          "minimum": 1,
          "type": "integer",
        },
        "perPage": {
          "default": 100,
          "maximum": 1000,
          "minimum": 1,
          "type": "integer",
        },
      },
      "type": "object",
    },
  },
  "schemes/components.yaml#/components/parameters/sort": {
    "description": "React admin sort object",
    "example": "{ "field": "createdAt", "order": "ASC" }",
    "in": "query",
    "name": "sort",
    "schema": {
      "additionalProperties": false,
      "default": {},
      "properties": {
        "field": {
          "type": "string",
        },
        "order": {
          "default": "ASC",
          "enum": [
            "ASC",
            "DESC",
          ],
        },
      },
      "type": "object",
    },
  },
  "schemes/components.yaml#/components/parameters/traceToken": {
    "description": "An optional trace token to be passed to the service and used for logging",
    "in": "header",
    "name": "X-Trace-Token",
    "schema": {
      "format": "uuid",
      "type": "string",
    },
  },
  "schemes/components.yaml#/components/responses/ListOfIdsResonse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/ListOfIds",
        },
      },
    },
    "description": "List of Ids that were affected",
  },
  "schemes/components.yaml#/components/responses/TextResponse": {
    "content": {
      "*/*": {
        "schema": {
          "type": "string",
        },
      },
    },
    "description": "Yaml File",
  },
  "schemes/components.yaml#/components/schemas/List": {
    "properties": {
      "total": {
        "type": "integer",
      },
    },
    "required": [
      "total",
    ],
  },
  "schemes/components.yaml#/components/schemas/ListOfStrings": {
    "items": {
      "type": "string",
    },
    "type": "array",
  },
  "schemes/levelisations.yaml": {
    "components": {
      "requestBodies": {
        "AccountLevelisationBulkSaveRequest": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "components.yaml#/components/schemas/BulkUpdate",
                  },
                  {
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/BulkAccountLevelisationSave",
                      },
                    },
                    "required": [
                      "data",
                    ],
                  },
                ],
              },
            },
          },
          "description": "Update multiple Account levelisation entities",
          "required": true,
        },
        "AccountLevelisationSaveRequest": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLevelisationSave",
              },
            },
          },
          "description": "Update an Account Levelisation entity",
          "required": true,
        },
        "LevelisationCreateRequest": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LevelisationCreate",
              },
            },
          },
          "description": "Create a new Levelisation process",
          "required": true,
        },
        "LevelisationSaveRequest": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LevelisationSave",
              },
            },
          },
          "description": "Update a Levelisation entity",
          "required": true,
        },
      },
      "responses": {
        "AccountLevelisationListResponse": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "components.yaml#/components/schemas/List",
                  },
                  {
                    "properties": {
                      "data": {
                        "items": {
                          "$ref": "#/components/schemas/AccountLevelisation",
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
          "description": "List of Levelisations for specific accounts",
        },
        "AccountLevelisationResponse": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLevelisation",
              },
            },
          },
          "description": "Levelisation calculations for a single account",
        },
        "AccountLevelisationTariffResponse": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountLevelisation",
              },
            },
          },
          "description": "Levelisation calculations for a single account",
        },
        "LevelisationListResponse": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "components.yaml#/components/schemas/List",
                  },
                  {
                    "properties": {
                      "data": {
                        "items": {
                          "$ref": "#/components/schemas/LevelisationList",
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
          "description": "List of Levelisations",
        },
        "LevelisationResponse": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Levelisation",
              },
            },
          },
          "description": "Levelisation calculations for whole quarter",
        },
      },
      "schemas": {
        "AccountLevelisation": {
          "allOf": [
            {
              "$ref": "#/components/schemas/AccountLevelisationList",
            },
            {
              "properties": {
                "exportPeriods": {
                  "items": {
                    "$ref": "#/components/schemas/PeriodWithCalculatedAmount",
                  },
                },
                "generationPeriods": {
                  "items": {
                    "$ref": "#/components/schemas/PeriodWithCalculatedAmount",
                  },
                },
              },
            },
          ],
        },
        "AccountLevelisationList": {
          "properties": {
            "accountId": {
              "type": "number",
            },
            "cfrFitId": {
              "type": "string",
            },
            "exportEndReadOn": {
              "format": "date-time",
              "type": "string",
            },
            "exportEndReadValue": {
              "type": "number",
            },
            "exportEnergy": {
              "type": "number",
            },
            "exportPayment": {
              "$ref": "components.yaml#/components/schemas/Pennies",
            },
            "exportPercentageSplit": {
              "type": "number",
            },
            "exportStartReadOn": {
              "format": "date-time",
              "type": "string",
            },
            "exportStartReadValue": {
              "type": "number",
            },
            "generationEndReadOn": {
              "format": "date-time",
              "type": "string",
            },
            "generationEndReadValue": {
              "type": "number",
            },
            "generationEnergy": {
              "type": "number",
            },
            "generationPayment": {
              "$ref": "components.yaml#/components/schemas/Pennies",
            },
            "generationPercentageSplit": {
              "type": "number",
            },
            "generationStartReadOn": {
              "format": "date-time",
              "type": "string",
            },
            "generationStartReadValue": {
              "type": "number",
            },
            "id": {
              "type": "number",
            },
            "installationId": {
              "type": "number",
            },
            "isAccepted": {
              "type": "boolean",
            },
            "levelisationId": {
              "type": "number",
            },
            "state": {
              "$ref": "#/components/schemas/AccountLevelisationState",
            },
            "totalPayment": {
              "$ref": "components.yaml#/components/schemas/Pennies",
            },
            "vatPayment": {
              "$ref": "components.yaml#/components/schemas/Pennies",
            },
          },
          "required": [
            "id",
            "levelisationId",
            "accountId",
            "installationId",
            "state",
            "cfrFitId",
            "isAccepted",
          ],
        },
        "AccountLevelisationSave": {
          "properties": {
            "id": {
              "type": "number",
            },
            "isAccepted": {
              "type": "boolean",
            },
          },
          "required": [
            "id",
            "isAccepted",
          ],
        },
        "AccountLevelisationState": {
          "enum": [
            "Pending",
            "Done",
          ],
        },
        "BulkAccountLevelisationSave": {
          "properties": {
            "isAccepted": {
              "type": "boolean",
            },
          },
          "required": [
            "isAccepted",
          ],
        },
        "Levelisation": {
          "allOf": [
            {
              "$ref": "#/components/schemas/LevelisationList",
            },
            {
              "properties": {
                "doneCount": {
                  "type": "number",
                },
                "pendingCount": {
                  "type": "number",
                },
                "totalCount": {
                  "type": "number",
                },
                "totalDeemedExportEnergy": {
                  "type": "number",
                },
                "totalDeemedExportPayment": {
                  "$ref": "components.yaml#/components/schemas/Pennies",
                },
                "totalExportPayment": {
                  "$ref": "components.yaml#/components/schemas/Pennies",
                },
                "totalGenerationPayment": {
                  "$ref": "components.yaml#/components/schemas/Pennies",
                },
                "totalMeteredExportEnergy": {
                  "type": "number",
                },
                "totalMeteredExportPayment": {
                  "$ref": "components.yaml#/components/schemas/Pennies",
                },
              },
            },
          ],
        },
        "LevelisationCreate": {
          "properties": {
            "quarter": {
              "$ref": "#/components/schemas/LevelisationQuarter",
            },
          },
          "required": [
            "quarter",
          ],
        },
        "LevelisationList": {
          "properties": {
            "endOn": {
              "format": "date-time",
              "type": "string",
            },
            "id": {
              "type": "number",
            },
            "isAccepted": {
              "type": "boolean",
            },
            "quarter": {
              "$ref": "#/components/schemas/LevelisationQuarter",
            },
            "startOn": {
              "format": "date-time",
              "type": "string",
            },
          },
          "required": [
            "id",
            "quarter",
            "isAccepted",
          ],
        },
        "LevelisationMeterRead": {
          "properties": {
            "dateOn": {
              "format": "date-time",
              "type": "string",
            },
            "value": {
              "type": "number",
            },
          },
          "required": [
            "dateOn",
            "value",
          ],
        },
        "LevelisationQuarter": {
          "pattern": "^F\\d+Q[1234]$",
          "type": "string",
        },
        "LevelisationRate": {
          "properties": {
            "endOn": {
              "format": "date-time",
              "type": "string",
            },
            "rate": {
              "type": "number",
            },
            "startOn": {
              "format": "date-time",
              "type": "string",
            },
          },
          "required": [
            "startOn",
            "endOn",
            "rate",
          ],
        },
        "LevelisationSave": {
          "properties": {
            "isAccepted": {
              "type": "boolean",
            },
            "isRestarted": {
              "type": "boolean",
            },
          },
          "required": [
            "isAccepted",
          ],
        },
        "PeriodWithCalculatedAmount": {
          "properties": {
            "amount": {
              "type": "string",
            },
            "end": {
              "$ref": "#/components/schemas/LevelisationMeterRead",
            },
            "energy": {
              "type": "number",
            },
            "percentageSplit": {
              "type": "number",
            },
            "rate": {
              "$ref": "#/components/schemas/LevelisationRate",
            },
            "start": {
              "$ref": "#/components/schemas/LevelisationMeterRead",
            },
          },
          "requiered": [
            "start",
            "end",
            "rate",
            "percentage",
            "energy",
            "amount",
          ],
        },
      },
    },
  },
  "schemes/levelisations.yaml#/components/requestBodies/AccountLevelisationBulkSaveRequest": {
    "content": {
      "application/json": {
        "schema": {
          "allOf": [
            {
              "$ref": "components.yaml#/components/schemas/BulkUpdate",
            },
            {
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/BulkAccountLevelisationSave",
                },
              },
              "required": [
                "data",
              ],
            },
          ],
        },
      },
    },
    "description": "Update multiple Account levelisation entities",
    "required": true,
  },
  "schemes/levelisations.yaml#/components/requestBodies/AccountLevelisationSaveRequest": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/AccountLevelisationSave",
        },
      },
    },
    "description": "Update an Account Levelisation entity",
    "required": true,
  },
  "schemes/levelisations.yaml#/components/requestBodies/LevelisationCreateRequest": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/LevelisationCreate",
        },
      },
    },
    "description": "Create a new Levelisation process",
    "required": true,
  },
  "schemes/levelisations.yaml#/components/requestBodies/LevelisationSaveRequest": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/LevelisationSave",
        },
      },
    },
    "description": "Update a Levelisation entity",
    "required": true,
  },
  "schemes/levelisations.yaml#/components/responses/AccountLevelisationListResponse": {
    "content": {
      "application/json": {
        "schema": {
          "allOf": [
            {
              "$ref": "components.yaml#/components/schemas/List",
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/AccountLevelisation",
                  },
                },
              },
            },
          ],
        },
      },
    },
    "description": "List of Levelisations for specific accounts",
  },
  "schemes/levelisations.yaml#/components/responses/AccountLevelisationResponse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/AccountLevelisation",
        },
      },
    },
    "description": "Levelisation calculations for a single account",
  },
  "schemes/levelisations.yaml#/components/responses/LevelisationListResponse": {
    "content": {
      "application/json": {
        "schema": {
          "allOf": [
            {
              "$ref": "components.yaml#/components/schemas/List",
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/LevelisationList",
                  },
                },
              },
            },
          ],
        },
      },
    },
    "description": "List of Levelisations",
  },
  "schemes/levelisations.yaml#/components/responses/LevelisationResponse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/Levelisation",
        },
      },
    },
    "description": "Levelisation calculations for whole quarter",
  },
  "schemes/read-checks.yaml": {
    "components": {
      "requestBodies": {
        "MeterReadBulkCheckDeleteRequest": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "components.yaml#/components/schemas/BulkDelete",
              },
            },
          },
          "description": "Delete multiple MeterReadCheck entities",
          "required": true,
        },
        "MeterReadBulkCheckSaveRequest": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "components.yaml#/components/schemas/BulkUpdate",
                  },
                  {
                    "properties": {
                      "data": {
                        "$ref": "#/components/schemas/MeterReadCheckSave",
                      },
                    },
                    "required": [
                      "data",
                    ],
                  },
                ],
              },
            },
          },
          "description": "Update multiple MeterReadCheck entities",
          "required": true,
        },
        "MeterReadCheckSaveRequest": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReadCheckSave",
              },
            },
          },
          "description": "Update a MeterReadCheck entity",
          "required": true,
        },
      },
      "responses": {
        "MeterReadCheckListResponse": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "components.yaml#/components/schemas/List",
                  },
                  {
                    "properties": {
                      "data": {
                        "items": {
                          "$ref": "#/components/schemas/MeterReadCheck",
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
          "description": "List of Meter Reads with tolernace failures",
        },
        "MeterReadCheckResponse": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterReadCheck",
              },
            },
          },
          "description": "Meter Read tolerance check",
        },
      },
      "schemas": {
        "MeterReadCheck": {
          "properties": {
            "accountId": {
              "type": "number",
            },
            "cfrFitId": {
              "type": "string",
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
            },
            "dateOn": {
              "format": "date-time",
              "type": "string",
            },
            "id": {
              "type": "number",
            },
            "isAccepted": {
              "type": "boolean",
            },
            "reason": {
              "type": "string",
            },
            "tolerance": {
              "$ref": "#/components/schemas/MeterReadTolerance",
            },
            "type": {
              "enum": [
                "Closing",
                "Meter Verification",
                "Opening",
                "Quarterly",
              ],
            },
            "value": {
              "type": "number",
            },
          },
          "required": [
            "id",
            "accountId",
            "cfrFitId",
            "dateOn",
            "value",
            "type",
            "createdAt",
            "isAccepted",
          ],
        },
        "MeterReadCheckSave": {
          "properties": {
            "isAccepted": {
              "type": "boolean",
            },
          },
          "required": [
            "isAccepted",
          ],
        },
        "MeterReadTolerance": {
          "properties": {
            "error": {
              "type": "string",
            },
            "expected": {
              "$ref": "#/components/schemas/MeterReadToleranceRead",
            },
            "previousRead": {
              "$ref": "#/components/schemas/MeterReadToleranceRead",
            },
          },
        },
        "MeterReadToleranceRead": {
          "properties": {
            "dateOn": {
              "format": "date-time",
              "type": "string",
            },
            "value": {
              "type": "number",
            },
          },
          "required": [
            "dateOn",
            "value",
          ],
        },
      },
    },
  },
  "schemes/read-checks.yaml#/components/requestBodies/MeterReadBulkCheckDeleteRequest": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "components.yaml#/components/schemas/BulkDelete",
        },
      },
    },
    "description": "Delete multiple MeterReadCheck entities",
    "required": true,
  },
  "schemes/read-checks.yaml#/components/requestBodies/MeterReadBulkCheckSaveRequest": {
    "content": {
      "application/json": {
        "schema": {
          "allOf": [
            {
              "$ref": "components.yaml#/components/schemas/BulkUpdate",
            },
            {
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MeterReadCheckSave",
                },
              },
              "required": [
                "data",
              ],
            },
          ],
        },
      },
    },
    "description": "Update multiple MeterReadCheck entities",
    "required": true,
  },
  "schemes/read-checks.yaml#/components/requestBodies/MeterReadCheckSaveRequest": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/MeterReadCheckSave",
        },
      },
    },
    "description": "Update a MeterReadCheck entity",
    "required": true,
  },
  "schemes/read-checks.yaml#/components/responses/MeterReadCheckListResponse": {
    "content": {
      "application/json": {
        "schema": {
          "allOf": [
            {
              "$ref": "components.yaml#/components/schemas/List",
            },
            {
              "properties": {
                "data": {
                  "items": {
                    "$ref": "#/components/schemas/MeterReadCheck",
                  },
                },
              },
            },
          ],
        },
      },
    },
    "description": "List of Meter Reads with tolernace failures",
  },
  "schemes/read-checks.yaml#/components/responses/MeterReadCheckResponse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/MeterReadCheck",
        },
      },
    },
    "description": "Meter Read tolerance check",
  },
}
`;

exports[`json-refs Should resolve complex refs 1`] = `
{
  "refs": {
    "#/$defs/address": {
      "properties": {
        "id": {
          "$ref": "#/$defs/id",
        },
        "num": {
          "$ref": "#/$defs/test%25percent",
        },
        "price": {
          "$ref": "#/$defs/test~1slash",
        },
        "street": {
          "$ref": "#/$defs/title",
        },
        "town": {
          "$ref": "#/$defs/test~0tilde",
        },
      },
      "type": "object",
    },
    "#/$defs/id": {
      "maxLength": 4,
      "minLength": 3,
      "type": "string",
    },
    "#/$defs/test%25percent": {
      "type": "integer",
    },
    "#/$defs/test~0tilde": {
      "type": "string",
    },
    "#/$defs/test~1slash": {
      "type": "number",
    },
    "#/$defs/title": {
      "pattern": "^[A-Z]",
      "type": "string",
    },
  },
  "schema": {
    "$defs": {
      "address": {
        "properties": {
          "id": {
            "$ref": "#/$defs/id",
          },
          "num": {
            "$ref": "#/$defs/test%25percent",
          },
          "price": {
            "$ref": "#/$defs/test~1slash",
          },
          "street": {
            "$ref": "#/$defs/title",
          },
          "town": {
            "$ref": "#/$defs/test~0tilde",
          },
        },
        "type": "object",
      },
      "id": {
        "maxLength": 4,
        "minLength": 3,
        "type": "string",
      },
      "test%percent": {
        "type": "integer",
      },
      "test/slash": {
        "type": "number",
      },
      "test~tilde": {
        "type": "string",
      },
      "title": {
        "pattern": "^[A-Z]",
        "type": "string",
      },
    },
    "properties": {
      "mangled": {
        "$ref": "#/$defs/unknown/more-unknown",
      },
      "user": {
        "properties": {
          "address": {
            "$ref": "#/$defs/address",
          },
          "id": {
            "$ref": "#/$defs/id",
          },
          "name": {
            "$ref": "#/$defs/title",
          },
        },
        "type": "object",
      },
    },
    "type": "object",
  },
  "uris": [],
}
`;

exports[`json-refs Should resolve nested recursive 1`] = `
{
  "#/components/responses/SessionResponse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/Session",
        },
      },
    },
    "description": "JWT Session",
  },
  "#/components/schemas/Session": {
    "properties": {
      "expiresAt": {
        "format": "date-time",
        "type": "string",
      },
      "jwt": {
        "type": "string",
      },
    },
    "required": [
      "jwt",
    ],
  },
  "./schema.yaml": {
    "components": {
      "responses": {
        "SessionResponse": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session",
              },
            },
          },
          "description": "JWT Session",
        },
      },
      "schemas": {
        "Message": {
          "type": "string",
        },
        "Session": {
          "properties": {
            "expiresAt": {
              "format": "date-time",
              "type": "string",
            },
            "jwt": {
              "type": "string",
            },
          },
          "required": [
            "jwt",
          ],
        },
      },
    },
    "openapi": "3.0.0",
    "paths": {
      "/v1/session": {
        "post": {
          "description": "Create a session for the current user. It requires google's oauth identity token, as it uses it for authentication.",
          "requestBody": {
            "$ref": "#/components/requestBodies/SessionRequest",
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/SessionResponse",
            },
            "500": {
              "$ref": "shared-responses.yaml#/components/responses/HttpErrorResponse",
            },
          },
          "summary": "Create Session",
          "tags": [
            "auth",
          ],
        },
      },
    },
  },
  "./schema.yaml#/components/schemas/Message": {
    "type": "string",
  },
  "./shared-schemas.yaml": {
    "components": {
      "schemas": {
        "HttpError": {
          "additionalProperties": false,
          "properties": {
            "message": {
              "$ref": "./schema.yaml#/components/schemas/Message",
            },
          },
          "required": [
            "message",
          ],
        },
      },
    },
  },
  "./shared-schemas.yaml#/components/schemas/HttpError": {
    "additionalProperties": false,
    "properties": {
      "message": {
        "$ref": "./schema.yaml#/components/schemas/Message",
      },
    },
    "required": [
      "message",
    ],
  },
  "shared-responses.yaml": {
    "components": {
      "responses": {
        "HttpErrorResponse": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "./shared-schemas.yaml#/components/schemas/HttpError",
              },
            },
          },
          "description": "Unknown Error",
        },
      },
    },
  },
  "shared-responses.yaml#/components/responses/HttpErrorResponse": {
    "content": {
      "application/json": {
        "schema": {
          "$ref": "./shared-schemas.yaml#/components/schemas/HttpError",
        },
      },
    },
    "description": "Unknown Error",
  },
}
`;

exports[`json-refs Should resolve nested recursive with files 1`] = `
{
  "refs": {
    "http://localhost:1234/node": {
      "$id": "http://localhost:1234/node",
      "description": "node",
      "properties": {
        "subtree": {
          "$ref": "http://localhost:1234/tree#",
        },
        "value": {
          "type": "number",
        },
      },
      "required": [
        "value",
      ],
      "type": "object",
    },
    "http://localhost:1234/node#": {
      "$id": "http://localhost:1234/node",
      "description": "node",
      "properties": {
        "subtree": {
          "$ref": "http://localhost:1234/tree#",
        },
        "value": {
          "type": "number",
        },
      },
      "required": [
        "value",
      ],
      "type": "object",
    },
    "http://localhost:1234/tree": {
      "$defs": {
        "node": {
          "$id": "http://localhost:1234/node",
          "description": "node",
          "properties": {
            "subtree": {
              "$ref": "http://localhost:1234/tree#",
            },
            "value": {
              "type": "number",
            },
          },
          "required": [
            "value",
          ],
          "type": "object",
        },
      },
      "$id": "http://localhost:1234/tree",
      "description": "tree of nodes",
      "properties": {
        "meta": {
          "type": "string",
        },
        "nodes": {
          "items": {
            "$ref": "http://localhost:1234/node#",
          },
          "type": "array",
        },
      },
      "required": [
        "meta",
        "nodes",
      ],
      "type": "object",
    },
    "http://localhost:1234/tree#": {
      "$defs": {
        "node": {
          "$id": "http://localhost:1234/node",
          "description": "node",
          "properties": {
            "subtree": {
              "$ref": "http://localhost:1234/tree#",
            },
            "value": {
              "type": "number",
            },
          },
          "required": [
            "value",
          ],
          "type": "object",
        },
      },
      "$id": "http://localhost:1234/tree",
      "description": "tree of nodes",
      "properties": {
        "meta": {
          "type": "string",
        },
        "nodes": {
          "items": {
            "$ref": "http://localhost:1234/node#",
          },
          "type": "array",
        },
      },
      "required": [
        "meta",
        "nodes",
      ],
      "type": "object",
    },
  },
  "schema": {
    "$defs": {
      "node": {
        "$id": "http://localhost:1234/node",
        "description": "node",
        "properties": {
          "subtree": {
            "$ref": "http://localhost:1234/tree#",
          },
          "value": {
            "type": "number",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
    },
    "$id": "http://localhost:1234/tree",
    "description": "tree of nodes",
    "properties": {
      "meta": {
        "type": "string",
      },
      "nodes": {
        "items": {
          "$ref": "http://localhost:1234/node#",
        },
        "type": "array",
      },
    },
    "required": [
      "meta",
      "nodes",
    ],
    "type": "object",
  },
  "uris": [],
}
`;
